{"version":3,"file":"index.js","sources":["../../../../packages/router/history.ts","../../../../packages/router/utils.ts","../../../../packages/router/router.ts","../../../../packages/router/index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch } from \"./router\";\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType = \"application/x-www-form-urlencoded\";\n\n/**\n * Internal interface to pass around, not intended for external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * Narrowed type enforcing a non-GET method\n */\nexport interface ActionSubmission extends Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n}\n\n/**\n * Arguments passed to route loader/action functions\n */\nexport interface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: DataFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: DataFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { History, Location, parsePath, To } from \"./history\";\nimport { Action as HistoryAction, createLocation } from \"./history\";\n\nimport {\n  ActionSubmission,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { ErrorResponse, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: NavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key Fetcher key\n   * @param href href to fetch\n   * @param opts Fetcher options, (method, submission, etc.)\n   */\n  fetch(key: string, href: string, opts?: NavigateOptions): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type NavigateOptions = LinkNavigateOptions | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches =\n    matchRoutes(dataRoutes, init.history.location) ||\n    getNotFoundMatches(dataRoutes);\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || null,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Always preserve any existing loaderData from re-used routes\n      loaderData: mergeLoaderData(state, newState),\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: location.state?.__resetScrollPosition !== false,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: NavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction = opts?.replace\n      ? HistoryAction.Replace\n      : HistoryAction.Push;\n\n    if (isSubmissionNavigation(opts)) {\n      return await startNavigation(historyAction, location, {\n        submission: {\n          formMethod: opts.formMethod || \"get\",\n          formAction: createHref(location),\n          formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n          formData: opts.formData,\n        },\n      });\n    }\n\n    return await startNavigation(historyAction, location);\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (\n      state.navigation.state === \"submitting\" &&\n      state.navigation.formMethod !== \"get\"\n    ) {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      startUninterruptedRevalidation?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      completeNavigation(historyAction, location, {\n        matches: getNotFoundMatches(dataRoutes),\n        errors: {\n          [dataRoutes[0].id]: new Response(null, { status: 404 }),\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission && isActionSubmission(opts.submission)) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: ActionSubmission,\n    matches: DataRouteMatch[]\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new Response(null, { status: 405 }),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation;\n\n    if (overrideNavigation) {\n      loadingNavigation = overrideNavigation;\n    } else if (submission?.formMethod === \"get\") {\n      let navigation: NavigationStates[\"Submitting\"] = {\n        state: \"submitting\",\n        location,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    } else {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key: string, href: string, opts?: NavigateOptions) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    if (isSubmissionNavigation(opts)) {\n      let submission: Submission = {\n        formMethod: opts.formMethod || \"get\",\n        formAction: href,\n        formEncType: opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      };\n\n      if (isActionSubmission(submission)) {\n        handleFetcherAction(key, href, match, submission);\n        return;\n      }\n\n      let loadingFetcher: FetcherStates[\"Submitting\"] = {\n        state: \"submitting\",\n        ...submission,\n        data: state.fetchers.get(key)?.data || undefined,\n      };\n      handleFetcherLoader(key, href, match, loadingFetcher);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, href, match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: ActionSubmission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      null,\n      null,\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data\n      updateState({\n        errors,\n        loaderData,\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(HistoryAction.Replace, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  actionSubmission?: ActionSubmission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = actionSubmission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, actionSubmission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: resultType, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  actionSubmission?: ActionSubmission\n): Request {\n  let init: RequestInit | undefined = undefined;\n\n  if (actionSubmission) {\n    let { formMethod, formEncType, formData } = actionSubmission;\n    let body = formData;\n\n    // If we're submitting application/x-www-form-urlencoded, then body should\n    // be of type URLSearchParams\n    if (formEncType === \"application/x-www-form-urlencoded\") {\n      body = new URLSearchParams();\n\n      for (let [key, value] of formData.entries()) {\n        invariant(\n          typeof value === \"string\",\n          'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n            'please use \"multipart/form-data\" instead.'\n        );\n        body.append(key, value);\n      }\n    }\n\n    init = {\n      method: formMethod.toUpperCase(),\n      headers: {\n        \"Content-Type\": formEncType,\n      },\n      body,\n    };\n  }\n\n  let url = createURL(location).toString();\n  return new Request(url, init);\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  state: RouterState,\n  newState: Partial<RouterState>\n): RouteData {\n  // Identify active routes that have current loaderData and didn't receive new\n  // loaderData\n  let reusedRoutesWithData = (newState.matches || state.matches).filter(\n    (match) =>\n      state.loaderData[match.route.id] !== undefined &&\n      newState.loaderData?.[match.route.id] === undefined\n  );\n  return {\n    ...newState.loaderData,\n    ...reusedRoutesWithData.reduce(\n      (acc, match) =>\n        Object.assign(acc, {\n          [match.route.id]: state.loaderData[match.route.id],\n        }),\n      {}\n    ),\n  };\n}\n\n// Find the nearest error boundary, looking upwards from the matched route\n// for the closest ancestor errorElement, defaulting to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId: string\n): DataRouteMatch {\n  return (\n    matches\n      .slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n      .reverse()\n      .find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): DataRouteMatch[] {\n  return [\n    {\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: routes[0],\n    },\n  ];\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Location | URL) {\n  return location.pathname + location.search;\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction isSubmissionNavigation(\n  opts?: NavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts && opts.formData != null;\n}\n\nfunction isActionSubmission(\n  submission: Submission\n): submission is ActionSubmission {\n  return submission && submission.formMethod !== \"get\";\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  generatePath,\n  getToPathname,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","readOnly","obj","Object","freeze","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","forEach","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","redirect","ErrorResponse","constructor","statusText","isRouteErrorResponse","ResultType","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","subscriber","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","getNotFoundMatches","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","id","router","historyAction","initialized","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","initialize","startNavigation","HistoryAction","dispose","abort","controller","subscribe","updateState","newState","completeNavigation","isActionReload","mergeLoaderData","getSavedScrollPosition","__resetScrollPosition","navigate","opts","isSubmissionNavigation","submission","revalidate","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","isHashChangeOnly","pendingActionData","pendingActionError","isActionSubmission","actionOutput","handleAction","shortCircuited","handleLoaders","hasNakedIndexQuery","result","actionMatch","type","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","findNearestBoundary","matchesToLoad","revalidatingFetchers","getMatchesToLoad","revalidatingFetcher","get","abortController","results","Promise","all","navigationResults","fetcherResults","delete","findRedirect","getLoaderRedirect","processLoaderData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","add","loadId","loadFetcher","staleKey","loaderResults","loaderRedirect","doneFetcher","deleteFetcher","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","enableScrollRestoration","positions","getPosition","getKey","y","_internalFetchControllers","allIds","treePath","dataRoute","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","actionSubmission","resultType","handler","request","createRequest","text","body","URLSearchParams","append","method","toUpperCase","Request","reusedRoutesWithData","acc","routeId","reverse","find","errorElement","getAll","v","origin","URL","createMemoryRouter","routerInit","createBrowserRouter","createHashRouter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;IACYA;AAwBZ;AACA;AACA;;WA1BYA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;GAAAA,WAAAA;;AAkKZ,MAAMC,iBAAiB,GAAG,UAA1B;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAqBA;AACA;AACA;AACA;AACO,SAASC,mBAAT,CACLC,OADK,EAEU;AAAA,MADfA,OACe;AADfA,IAAAA,OACe,GADiB,EACjB;AAAA;;AACf,MAAI;AAAEC,IAAAA,cAAc,GAAG,CAAC,GAAD,CAAnB;AAA0BC,IAAAA,YAA1B;AAAwCC,IAAAA,QAAQ,GAAG;AAAnD,MAA6DH,OAAjE;AACA,MAAII,OAAJ,CAFe;;AAGfA,EAAAA,OAAO,GAAGH,cAAc,CAACI,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAC3BC,oBAAoB,CAACF,KAAD,EAAQ,IAAR,EAAcC,KAAK,KAAK,CAAV,GAAc,SAAd,GAA0BE,SAAxC,CADZ,CAAV;AAGA,MAAIF,KAAK,GAAGG,UAAU,CACpBR,YAAY,IAAI,IAAhB,GAAuBE,OAAO,CAACO,MAAR,GAAiB,CAAxC,GAA4CT,YADxB,CAAtB;AAGA,MAAIU,MAAM,GAAGf,MAAM,CAACgB,GAApB;AACA,MAAIC,QAAyB,GAAG,IAAhC;;AAEA,WAASJ,UAAT,CAAoBK,CAApB,EAAuC;AACrC,WAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,CAAT,EAAY,CAAZ,CAAT,EAAyBX,OAAO,CAACO,MAAR,GAAiB,CAA1C,CAAP;AACD;;AACD,WAASQ,kBAAT,GAAwC;AACtC,WAAOf,OAAO,CAACG,KAAD,CAAd;AACD;;AACD,WAASC,oBAAT,CACEY,EADF,EAEEC,KAFF,EAGEC,GAHF,EAIY;AAAA,QAFVD,KAEU;AAFVA,MAAAA,KAEU,GAFG,IAEH;AAAA;;AACV,QAAIE,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGe,kBAAkB,GAAGM,QAAxB,GAAmC,GADf,EAE3BL,EAF2B,EAG3BC,KAH2B,EAI3BC,GAJ2B,CAA7B;AAMA,4CAAAI,OAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,MAAgC,GAD3B,+DAEsDC,IAAI,CAACC,SAAL,CACzDT,EADyD,CAFtD,CAAP;AAMA,WAAOG,QAAP;AACD;;AAED,MAAIO,OAAsB,GAAG;AAC3B,QAAIvB,KAAJ,GAAY;AACV,aAAOA,KAAP;AACD,KAH0B;;AAI3B,QAAIK,MAAJ,GAAa;AACX,aAAOA,MAAP;AACD,KAN0B;;AAO3B,QAAIW,QAAJ,GAAe;AACb,aAAOJ,kBAAkB,EAAzB;AACD,KAT0B;;AAU3BY,IAAAA,UAAU,CAACX,EAAD,EAAK;AACb,aAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C;AACD,KAZ0B;;AAa3Ba,IAAAA,IAAI,CAACb,EAAD,EAAKC,KAAL,EAAY;AACdT,MAAAA,MAAM,GAAGf,MAAM,CAACqC,IAAhB;AACA,UAAIC,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC;AACAd,MAAAA,KAAK,IAAI,CAAT;AACAH,MAAAA,OAAO,CAACgC,MAAR,CAAe7B,KAAf,EAAsBH,OAAO,CAACO,MAA9B,EAAsCwB,YAAtC;;AACA,UAAIhC,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,QAAAA,QAAQ,CAAC;AAAEF,UAAAA,MAAF;AAAUW,UAAAA,QAAQ,EAAEY;AAApB,SAAD,CAAR;AACD;AACF,KArB0B;;AAsB3BE,IAAAA,OAAO,CAACjB,EAAD,EAAKC,KAAL,EAAY;AACjBT,MAAAA,MAAM,GAAGf,MAAM,CAACyC,OAAhB;AACA,UAAIH,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC;AACAjB,MAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB4B,YAAjB;;AACA,UAAIhC,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,QAAAA,QAAQ,CAAC;AAAEF,UAAAA,MAAF;AAAUW,UAAAA,QAAQ,EAAEY;AAApB,SAAD,CAAR;AACD;AACF,KA7B0B;;AA8B3BI,IAAAA,EAAE,CAACC,KAAD,EAAQ;AACR5B,MAAAA,MAAM,GAAGf,MAAM,CAACgB,GAAhB;AACAN,MAAAA,KAAK,GAAGG,UAAU,CAACH,KAAK,GAAGiC,KAAT,CAAlB;;AACA,UAAI1B,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC;AAAEF,UAAAA,MAAF;AAAUW,UAAAA,QAAQ,EAAEJ,kBAAkB;AAAtC,SAAD,CAAR;AACD;AACF,KApC0B;;AAqC3BsB,IAAAA,MAAM,CAACC,EAAD,EAAe;AACnB5B,MAAAA,QAAQ,GAAG4B,EAAX;AACA,aAAO,MAAM;AACX5B,QAAAA,QAAQ,GAAG,IAAX;AACD,OAFD;AAGD;;AA1C0B,GAA7B;AA6CA,SAAOgB,OAAP;AACD;AAGD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASa,oBAAT,CACL3C,OADK,EAEW;AAAA,MADhBA,OACgB;AADhBA,IAAAA,OACgB,GADiB,EACjB;AAAA;;AAChB,WAAS4C,qBAAT,CACEC,MADF,EAEEC,aAFF,EAGE;AAAA;;AACA,QAAI;AAAErB,MAAAA,QAAF;AAAYsB,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,QAA6BH,MAAM,CAACtB,QAAxC;AACA,WAAOC,cAAc,CACnB,EADmB,EAEnB;AAAEC,MAAAA,QAAF;AAAYsB,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,KAFmB;AAInB,6BAAAF,aAAa,CAACzB,KAAd,0CAAqB4B,GAArB,KAA4B,IAJT,EAKnB,0BAAAH,aAAa,CAACzB,KAAd,2CAAqBC,GAArB,KAA4B,SALT,CAArB;AAOD;;AAED,WAAS4B,iBAAT,CAA2BL,MAA3B,EAA2CzB,EAA3C,EAAmD;AACjD,WAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C;AACD;;AAED,SAAO+B,kBAAkB,CACvBP,qBADuB,EAEvBM,iBAFuB,EAGvB,IAHuB,EAIvBlD,OAJuB,CAAzB;AAMD;AAGD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoD,iBAAT,CACLpD,OADK,EAEQ;AAAA,MADbA,OACa;AADbA,IAAAA,OACa,GADiB,EACjB;AAAA;;AACb,WAASqD,kBAAT,CACER,MADF,EAEEC,aAFF,EAGE;AAAA;;AACA,QAAI;AACFrB,MAAAA,QAAQ,GAAG,GADT;AAEFsB,MAAAA,MAAM,GAAG,EAFP;AAGFC,MAAAA,IAAI,GAAG;AAHL,QAIAM,SAAS,CAACT,MAAM,CAACtB,QAAP,CAAgByB,IAAhB,CAAqBO,MAArB,CAA4B,CAA5B,CAAD,CAJb;AAKA,WAAO/B,cAAc,CACnB,EADmB,EAEnB;AAAEC,MAAAA,QAAF;AAAYsB,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,KAFmB;AAInB,8BAAAF,aAAa,CAACzB,KAAd,2CAAqB4B,GAArB,KAA4B,IAJT,EAKnB,0BAAAH,aAAa,CAACzB,KAAd,2CAAqBC,GAArB,KAA4B,SALT,CAArB;AAOD;;AAED,WAASkC,cAAT,CAAwBX,MAAxB,EAAwCzB,EAAxC,EAAgD;AAC9C,QAAIqC,IAAI,GAAGZ,MAAM,CAACa,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAX;AACA,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;AACrC,UAAIC,GAAG,GAAGjB,MAAM,CAACtB,QAAP,CAAgBqC,IAA1B;AACA,UAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAhB;AACAJ,MAAAA,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC;AACD;;AAED,WAAOH,IAAI,GAAG,GAAP,IAAc,OAAOxC,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAAtD,CAAP;AACD;;AAED,WAAS8C,oBAAT,CAA8B3C,QAA9B,EAAkDH,EAAlD,EAA0D;AACxD,4CAAAM,OAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,MAAgC,GAD3B,iEAEwDC,IAAI,CAACC,SAAL,CAC3DT,EAD2D,CAFxD,OAAP;AAMD;;AAED,SAAO+B,kBAAkB,CACvBE,kBADuB,EAEvBG,cAFuB,EAGvBU,oBAHuB,EAIvBlE,OAJuB,CAAzB;AAMD;AAGD;AACA;AACA;;AAEA,MAAMmE,QAAoC,GAAG,wCACxCC,GAAD,IAASC,MAAM,CAACC,MAAP,CAAcF,GAAd,CADgC,GAExCA,GAAD,IAASA,GAFb;;AAIA,SAAS1C,OAAT,CAAiB6C,IAAjB,EAA4BC,OAA5B,EAA6C;AAC3C,MAAI,CAACD,IAAL,EAAW;AACT;AACA,QAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaF,OAAb;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAIG,KAAJ,CAAUH,OAAV,CAAN,CANE;AAQH,KARD,CAQE,OAAOI,CAAP,EAAU;AACb;AACF;;AAED,SAASC,SAAT,GAAqB;AACnB,SAAO7D,IAAI,CAAC8D,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BxB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASyB,eAAT,CAAyBzD,QAAzB,EAA2D;AACzD,SAAO;AACL0B,IAAAA,GAAG,EAAE1B,QAAQ,CAACF,KADT;AAELC,IAAAA,GAAG,EAAEC,QAAQ,CAACD;AAFT,GAAP;AAID;AAED;AACA;AACA;;;AACO,SAASE,cAAT,CACLyD,OADK,EAEL7D,EAFK,EAGLC,KAHK,EAILC,GAJK,EAKK;AAAA,MAFVD,KAEU;AAFVA,IAAAA,KAEU,GAFG,IAEH;AAAA;;AACV,SAAO8C,QAAQ;AACb1C,IAAAA,QAAQ,EAAE,OAAOwD,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAACxD,QAD7C;AAEbsB,IAAAA,MAAM,EAAE,EAFK;AAGbC,IAAAA,IAAI,EAAE;AAHO,KAIT,OAAO5B,EAAP,KAAc,QAAd,GAAyBkC,SAAS,CAAClC,EAAD,CAAlC,GAAyCA,EAJhC;AAKbC,IAAAA,KALa;AAMb;AACA;AACA;AACA;AACAC,IAAAA,GAAG,EAAE,CAACF,EAAD,oBAACA,EAAD,CAAkBE,GAAlB,KAAyBA,GAAzB,IAAgCuD,SAAS;AAVjC,KAAf;AAYD;AAED;AACA;AACA;;AACO,SAAS7C,UAAT,OAIW;AAAA,MAJS;AACzBP,IAAAA,QAAQ,GAAG,GADc;AAEzBsB,IAAAA,MAAM,GAAG,EAFgB;AAGzBC,IAAAA,IAAI,GAAG;AAHkB,GAIT;AAChB,MAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEtB,QAAQ,IAAIsB,MAAM,CAACpB,MAAP,CAAc,CAAd,MAAqB,GAArB,GAA2BoB,MAA3B,GAAoC,MAAMA,MAAtD;AACF,MAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEvB,QAAQ,IAAIuB,IAAI,CAACrB,MAAL,CAAY,CAAZ,MAAmB,GAAnB,GAAyBqB,IAAzB,GAAgC,MAAMA,IAAlD;AACF,SAAOvB,QAAP;AACD;AAED;AACA;AACA;;AACO,SAAS6B,SAAT,CAAmB4B,IAAnB,EAAgD;AACrD,MAAIC,UAAyB,GAAG,EAAhC;;AAEA,MAAID,IAAJ,EAAU;AACR,QAAInB,SAAS,GAAGmB,IAAI,CAAClB,OAAL,CAAa,GAAb,CAAhB;;AACA,QAAID,SAAS,IAAI,CAAjB,EAAoB;AAClBoB,MAAAA,UAAU,CAACnC,IAAX,GAAkBkC,IAAI,CAAC3B,MAAL,CAAYQ,SAAZ,CAAlB;AACAmB,MAAAA,IAAI,GAAGA,IAAI,CAAC3B,MAAL,CAAY,CAAZ,EAAeQ,SAAf,CAAP;AACD;;AAED,QAAIqB,WAAW,GAAGF,IAAI,CAAClB,OAAL,CAAa,GAAb,CAAlB;;AACA,QAAIoB,WAAW,IAAI,CAAnB,EAAsB;AACpBD,MAAAA,UAAU,CAACpC,MAAX,GAAoBmC,IAAI,CAAC3B,MAAL,CAAY6B,WAAZ,CAApB;AACAF,MAAAA,IAAI,GAAGA,IAAI,CAAC3B,MAAL,CAAY,CAAZ,EAAe6B,WAAf,CAAP;AACD;;AAED,QAAIF,IAAJ,EAAU;AACRC,MAAAA,UAAU,CAAC1D,QAAX,GAAsByD,IAAtB;AACD;AACF;;AAED,SAAOC,UAAP;AACD;;AASD,SAAShC,kBAAT,CACEkC,WADF,EAEEtD,UAFF,EAGEuD,gBAHF,EAIEtF,OAJF,EAKc;AAAA,MADZA,OACY;AADZA,IAAAA,OACY,GADiB,EACjB;AAAA;;AACZ,MAAI;AAAE6C,IAAAA,MAAM,GAAGa,QAAQ,CAAC6B,WAApB;AAAkCpF,IAAAA,QAAQ,GAAG;AAA7C,MAAuDH,OAA3D;AACA,MAAI8C,aAAa,GAAGD,MAAM,CAACf,OAA3B;AACA,MAAIlB,MAAM,GAAGf,MAAM,CAACgB,GAApB;AACA,MAAIC,QAAyB,GAAG,IAAhC;;AAEA,WAAS0E,SAAT,GAAqB;AACnB5E,IAAAA,MAAM,GAAGf,MAAM,CAACgB,GAAhB;;AACA,QAAIC,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,MAAF;AAAUW,QAAAA,QAAQ,EAAEO,OAAO,CAACP;AAA5B,OAAD,CAAR;AACD;AACF;;AAED,WAASU,IAAT,CAAcb,EAAd,EAAsBC,KAAtB,EAAmC;AACjCT,IAAAA,MAAM,GAAGf,MAAM,CAACqC,IAAhB;AACA,QAAIX,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B;AACAiE,IAAAA,gBAAgB,QAAhB,YAAAA,gBAAgB,CAAG/D,QAAH,EAAaH,EAAb,CAAhB;AAEA,QAAIqE,YAAY,GAAGT,eAAe,CAACzD,QAAD,CAAlC;AACA,QAAIuC,GAAG,GAAGhC,OAAO,CAACC,UAAR,CAAmBR,QAAnB,CAAV,CANiC;;AASjC,QAAI;AACFuB,MAAAA,aAAa,CAAC4C,SAAd,CAAwBD,YAAxB,EAAsC,EAAtC,EAA0C3B,GAA1C;AACD,KAFD,CAEE,OAAO6B,KAAP,EAAc;AACd;AACA;AACA9C,MAAAA,MAAM,CAACtB,QAAP,CAAgBqE,MAAhB,CAAuB9B,GAAvB;AACD;;AAED,QAAI3D,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,MAAF;AAAUW,QAAAA;AAAV,OAAD,CAAR;AACD;AACF;;AAED,WAASc,OAAT,CAAiBjB,EAAjB,EAAyBC,KAAzB,EAAsC;AACpCT,IAAAA,MAAM,GAAGf,MAAM,CAACyC,OAAhB;AACA,QAAIf,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B;AACAiE,IAAAA,gBAAgB,QAAhB,YAAAA,gBAAgB,CAAG/D,QAAH,EAAaH,EAAb,CAAhB;AAEA,QAAIqE,YAAY,GAAGT,eAAe,CAACzD,QAAD,CAAlC;AACA,QAAIuC,GAAG,GAAGhC,OAAO,CAACC,UAAR,CAAmBR,QAAnB,CAAV;AACAuB,IAAAA,aAAa,CAAC+C,YAAd,CAA2BJ,YAA3B,EAAyC,EAAzC,EAA6C3B,GAA7C;;AAEA,QAAI3D,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,MAAF;AAAUW,QAAAA,QAAQ,EAAEA;AAApB,OAAD,CAAR;AACD;AACF;;AAED,MAAIO,OAAgB,GAAG;AACrB,QAAIlB,MAAJ,GAAa;AACX,aAAOA,MAAP;AACD,KAHoB;;AAIrB,QAAIW,QAAJ,GAAe;AACb,aAAO8D,WAAW,CAACxC,MAAD,EAASC,aAAT,CAAlB;AACD,KANoB;;AAOrBL,IAAAA,MAAM,CAACC,EAAD,EAAe;AACnB,UAAI5B,QAAJ,EAAc;AACZ,cAAM,IAAI6D,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD9B,MAAAA,MAAM,CAACiD,gBAAP,CAAwBhG,iBAAxB,EAA2C0F,SAA3C;AACA1E,MAAAA,QAAQ,GAAG4B,EAAX;AAEA,aAAO,MAAM;AACXG,QAAAA,MAAM,CAACkD,mBAAP,CAA2BjG,iBAA3B,EAA8C0F,SAA9C;AACA1E,QAAAA,QAAQ,GAAG,IAAX;AACD,OAHD;AAID,KAlBoB;;AAmBrBiB,IAAAA,UAAU,CAACX,EAAD,EAAK;AACb,aAAOW,UAAU,CAACc,MAAD,EAASzB,EAAT,CAAjB;AACD,KArBoB;;AAsBrBa,IAAAA,IAtBqB;AAuBrBI,IAAAA,OAvBqB;;AAwBrBE,IAAAA,EAAE,CAACxB,CAAD,EAAI;AACJ,aAAO+B,aAAa,CAACP,EAAd,CAAiBxB,CAAjB,CAAP;AACD;;AA1BoB,GAAvB;AA6BA,SAAOe,OAAP;AACD;;AC7bD;AACA;AACA;AACA;AACA;AACA,AAAO,SAASkE,WAAT,CACLC,MADK,EAELC,WAFK,EAGLC,QAHK,EAIyC;AAAA,MAD9CA,QAC8C;AAD9CA,IAAAA,QAC8C,GADnC,GACmC;AAAA;;AAC9C,MAAI5E,QAAQ,GACV,OAAO2E,WAAP,KAAuB,QAAvB,GAAkC5C,SAAS,CAAC4C,WAAD,CAA3C,GAA2DA,WAD7D;AAGA,MAAIzE,QAAQ,GAAG2E,aAAa,CAAC7E,QAAQ,CAACE,QAAT,IAAqB,GAAtB,EAA2B0E,QAA3B,CAA5B;;AAEA,MAAI1E,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAI4E,QAAQ,GAAGC,aAAa,CAACL,MAAD,CAA5B;AACAM,EAAAA,iBAAiB,CAACF,QAAD,CAAjB;AAEA,MAAIG,OAAO,GAAG,IAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAX,IAAmBC,CAAC,GAAGJ,QAAQ,CAAC1F,MAAhD,EAAwD,EAAE8F,CAA1D,EAA6D;AAC3DD,IAAAA,OAAO,GAAGE,gBAAgB,CAA0BL,QAAQ,CAACI,CAAD,CAAlC,EAAuChF,QAAvC,CAA1B;AACD;;AAED,SAAO+E,OAAP;AACD;;AAeD,SAASF,aAAT,CACEL,MADF,EAEEI,QAFF,EAGEM,WAHF,EAIEC,UAJF,EAKkC;AAAA,MAHhCP,QAGgC;AAHhCA,IAAAA,QAGgC,GAHW,EAGX;AAAA;;AAAA,MAFhCM,WAEgC;AAFhCA,IAAAA,WAEgC,GAFY,EAEZ;AAAA;;AAAA,MADhCC,UACgC;AADhCA,IAAAA,UACgC,GADnB,EACmB;AAAA;;AAChCX,EAAAA,MAAM,CAACY,OAAP,CAAe,CAACC,KAAD,EAAQvG,KAAR,KAAkB;AAC/B,QAAIwG,IAAgC,GAAG;AACrCC,MAAAA,YAAY,EAAEF,KAAK,CAAC5B,IAAN,IAAc,EADS;AAErC+B,MAAAA,aAAa,EAAEH,KAAK,CAACG,aAAN,KAAwB,IAFF;AAGrCC,MAAAA,aAAa,EAAE3G,KAHsB;AAIrCuG,MAAAA;AAJqC,KAAvC;;AAOA,QAAIC,IAAI,CAACC,YAAL,CAAkBG,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;AACrC,OACEJ,IAAI,CAACC,YAAL,CAAkBG,UAAlB,CAA6BP,UAA7B,CADF,2CAAAQ,SAAS,QAEP,2BAAwBL,IAAI,CAACC,YAA7B,qCACMJ,UADN,oHAFO,CAAT,GAAAQ,SAAS,OAAT;AAOAL,MAAAA,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACC,YAAL,CAAkB/C,KAAlB,CAAwB2C,UAAU,CAACjG,MAAnC,CAApB;AACD;;AAED,QAAIuE,IAAI,GAAGmC,SAAS,CAAC,CAACT,UAAD,EAAaG,IAAI,CAACC,YAAlB,CAAD,CAApB;AACA,QAAIM,UAAU,GAAGX,WAAW,CAACY,MAAZ,CAAmBR,IAAnB,CAAjB,CApB+B;AAuB/B;AACA;;AACA,QAAID,KAAK,CAACU,QAAN,IAAkBV,KAAK,CAACU,QAAN,CAAe7G,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,QACEmG,KAAK,CAACvG,KAAN,KAAgB,IADlB,4CAAA6G,SAAS,QAEP,qGACuClC,IADvC,SAFO,CAAT,GAAAkC,SAAS,OAAT;AAMAd,MAAAA,aAAa,CAACQ,KAAK,CAACU,QAAP,EAAiBnB,QAAjB,EAA2BiB,UAA3B,EAAuCpC,IAAvC,CAAb;AACD,KAjC8B;AAoC/B;;;AACA,QAAI4B,KAAK,CAAC5B,IAAN,IAAc,IAAd,IAAsB,CAAC4B,KAAK,CAACvG,KAAjC,EAAwC;AACtC;AACD;;AAED8F,IAAAA,QAAQ,CAACpE,IAAT,CAAc;AAAEiD,MAAAA,IAAF;AAAQuC,MAAAA,KAAK,EAAEC,YAAY,CAACxC,IAAD,EAAO4B,KAAK,CAACvG,KAAb,CAA3B;AAAgD+G,MAAAA;AAAhD,KAAd;AACD,GA1CD;AA4CA,SAAOjB,QAAP;AACD;;AAED,SAASE,iBAAT,CAA2BF,QAA3B,EAA0D;AACxDA,EAAAA,QAAQ,CAACsB,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAACH,KAAF,KAAYI,CAAC,CAACJ,KAAd,GACII,CAAC,CAACJ,KAAF,GAAUG,CAAC,CAACH,KADhB;AAAA,IAEIK,cAAc,CACZF,CAAC,CAACN,UAAF,CAAajH,GAAb,CAAkB0G,IAAD,IAAUA,IAAI,CAACG,aAAhC,CADY,EAEZW,CAAC,CAACP,UAAF,CAAajH,GAAb,CAAkB0G,IAAD,IAAUA,IAAI,CAACG,aAAhC,CAFY,CAHpB;AAQD;;AAED,MAAMa,OAAO,GAAG,QAAhB;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,YAAY,GAAG,CAAC,CAAtB;;AACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAK,GAArC;;AAEA,SAASZ,YAAT,CAAsBxC,IAAtB,EAAoC3E,KAApC,EAAwE;AACtE,MAAIgI,QAAQ,GAAGrD,IAAI,CAACsD,KAAL,CAAW,GAAX,CAAf;AACA,MAAIC,YAAY,GAAGF,QAAQ,CAAC5H,MAA5B;;AACA,MAAI4H,QAAQ,CAACG,IAAT,CAAcL,OAAd,CAAJ,EAA4B;AAC1BI,IAAAA,YAAY,IAAIL,YAAhB;AACD;;AAED,MAAI7H,KAAJ,EAAW;AACTkI,IAAAA,YAAY,IAAIR,eAAhB;AACD;;AAED,SAAOM,QAAQ,CACZI,MADI,CACIL,CAAD,IAAO,CAACD,OAAO,CAACC,CAAD,CADlB,EAEJM,MAFI,CAGH,CAACnB,KAAD,EAAQoB,OAAR,KACEpB,KAAK,IACJM,OAAO,CAACe,IAAR,CAAaD,OAAb,IACGb,mBADH,GAEGa,OAAO,KAAK,EAAZ,GACAX,iBADA,GAEAC,kBALC,CAJJ,EAUHM,YAVG,CAAP;AAYD;;AAED,SAASX,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAA0D;AACxD,MAAIkB,QAAQ,GACVnB,CAAC,CAACjH,MAAF,KAAakH,CAAC,CAAClH,MAAf,IAAyBiH,CAAC,CAAC3D,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,EAAe+E,KAAf,CAAqB,CAACjI,CAAD,EAAI0F,CAAJ,KAAU1F,CAAC,KAAK8G,CAAC,CAACpB,CAAD,CAAtC,CAD3B;AAGA,SAAOsC,QAAQ;AAEX;AACA;AACA;AACAnB,EAAAA,CAAC,CAACA,CAAC,CAACjH,MAAF,GAAW,CAAZ,CAAD,GAAkBkH,CAAC,CAACA,CAAC,CAAClH,MAAF,GAAW,CAAZ,CALR;AAOX;AACA,GARJ;AASD;;AAED,SAAS+F,gBAAT,CAIEuC,MAJF,EAKExH,QALF,EAMkD;AAChD,MAAI;AAAE6F,IAAAA;AAAF,MAAiB2B,MAArB;AAEA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,eAAe,GAAG,GAAtB;AACA,MAAI3C,OAAgD,GAAG,EAAvD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAAU,CAAC3G,MAA/B,EAAuC,EAAE8F,CAAzC,EAA4C;AAC1C,QAAIM,IAAI,GAAGO,UAAU,CAACb,CAAD,CAArB;AACA,QAAI2C,GAAG,GAAG3C,CAAC,KAAKa,UAAU,CAAC3G,MAAX,GAAoB,CAApC;AACA,QAAI0I,iBAAiB,GACnBF,eAAe,KAAK,GAApB,GACI1H,QADJ,GAEIA,QAAQ,CAACwC,KAAT,CAAekF,eAAe,CAACxI,MAA/B,KAA0C,GAHhD;AAIA,QAAI2I,KAAK,GAAGC,SAAS,CACnB;AAAErE,MAAAA,IAAI,EAAE6B,IAAI,CAACC,YAAb;AAA2BC,MAAAA,aAAa,EAAEF,IAAI,CAACE,aAA/C;AAA8DmC,MAAAA;AAA9D,KADmB,EAEnBC,iBAFmB,CAArB;AAKA,QAAI,CAACC,KAAL,EAAY,OAAO,IAAP;AAEZjF,IAAAA,MAAM,CAACuB,MAAP,CAAcsD,aAAd,EAA6BI,KAAK,CAACE,MAAnC;AAEA,QAAI1C,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAEAN,IAAAA,OAAO,CAACvE,IAAR,CAAa;AACX;AACAuH,MAAAA,MAAM,EAAEN,aAFG;AAGXzH,MAAAA,QAAQ,EAAE4F,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAAC7H,QAAxB,CAAD,CAHR;AAIXgI,MAAAA,YAAY,EAAEC,iBAAiB,CAC7BrC,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAACG,YAAxB,CAAD,CADoB,CAJpB;AAOX3C,MAAAA;AAPW,KAAb;;AAUA,QAAIwC,KAAK,CAACG,YAAN,KAAuB,GAA3B,EAAgC;AAC9BN,MAAAA,eAAe,GAAG9B,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAACG,YAAxB,CAAD,CAA3B;AACD;AACF;;AAED,SAAOjD,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,AAAO,SAASmD,YAAT,CAAsBzE,IAAtB,EAAoCsE,MAApC,EAAiE;AAAA,MAA7BA,MAA6B;AAA7BA,IAAAA,MAA6B,GAAZ,EAAY;AAAA;;AACtE,SAAOtE,IAAI,CACR7C,OADI,CACI,SADJ,EACe,CAACuH,CAAD,EAAItI,GAAJ,KAAY;AAC9B,MAAUkI,MAAM,CAAClI,GAAD,CAAN,IAAe,IAAzB,4CAAA8F,SAAS,wBAAmC9F,GAAnC,cAAT,GAAA8F,SAAS,OAAT;AACA,WAAOoC,MAAM,CAAClI,GAAD,CAAb;AACD,GAJI,EAKJe,OALI,CAKI,QALJ,EAKeuH,CAAD,IACjBJ,MAAM,CAAC,GAAD,CAAN,IAAe,IAAf,GAAsB,EAAtB,GAA2BA,MAAM,CAAC,GAAD,CAAN,CAAYnH,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,CANxB,CAAP;AAQD;AAED;AACA;AACA;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,SAASkH,SAAT,CAILM,OAJK,EAKLpI,QALK,EAMuB;AAC5B,MAAI,OAAOoI,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAG;AAAE3E,MAAAA,IAAI,EAAE2E,OAAR;AAAiB5C,MAAAA,aAAa,EAAE,KAAhC;AAAuCmC,MAAAA,GAAG,EAAE;AAA5C,KAAV;AACD;;AAED,MAAI,CAACU,OAAD,EAAUC,UAAV,IAAwBC,WAAW,CACrCH,OAAO,CAAC3E,IAD6B,EAErC2E,OAAO,CAAC5C,aAF6B,EAGrC4C,OAAO,CAACT,GAH6B,CAAvC;AAMA,MAAIE,KAAK,GAAG7H,QAAQ,CAAC6H,KAAT,CAAeQ,OAAf,CAAZ;AACA,MAAI,CAACR,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B;AACA,MAAIG,YAAY,GAAGN,eAAe,CAAC9G,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB;AACA,MAAI4H,aAAa,GAAGX,KAAK,CAACrF,KAAN,CAAY,CAAZ,CAApB;AACA,MAAIuF,MAAc,GAAGO,UAAU,CAACnB,MAAX,CACnB,CAACsB,IAAD,EAAOC,SAAP,EAAkB5J,KAAlB,KAA4B;AAC1B;AACA;AACA,QAAI4J,SAAS,KAAK,GAAlB,EAAuB;AACrB,UAAIC,UAAU,GAAGH,aAAa,CAAC1J,KAAD,CAAb,IAAwB,EAAzC;AACAkJ,MAAAA,YAAY,GAAGN,eAAe,CAC3BlF,KADY,CACN,CADM,EACHkF,eAAe,CAACxI,MAAhB,GAAyByJ,UAAU,CAACzJ,MADjC,EAEZ0B,OAFY,CAEJ,SAFI,EAEO,IAFP,CAAf;AAGD;;AAED6H,IAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAAC1J,KAAD,CAAb,IAAwB,EADgB,EAExC4J,SAFwC,CAA1C;AAIA,WAAOD,IAAP;AACD,GAhBkB,EAiBnB,EAjBmB,CAArB;AAoBA,SAAO;AACLV,IAAAA,MADK;AAEL/H,IAAAA,QAAQ,EAAE0H,eAFL;AAGLM,IAAAA,YAHK;AAILI,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASG,WAAT,CACE9E,IADF,EAEE+B,aAFF,EAGEmC,GAHF,EAIsB;AAAA,MAFpBnC,aAEoB;AAFpBA,IAAAA,aAEoB,GAFJ,KAEI;AAAA;;AAAA,MADpBmC,GACoB;AADpBA,IAAAA,GACoB,GADd,IACc;AAAA;;AACpB,0CAAA1H,SAAO,CACLwD,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAACoF,QAAL,CAAc,GAAd,CAAjB,IAAuCpF,IAAI,CAACoF,QAAL,CAAc,IAAd,CADlC,EAEL,kBAAepF,IAAf,iDACMA,IAAI,CAAC7C,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsC6C,IAAI,CAAC7C,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;AAQA,MAAI0H,UAAoB,GAAG,EAA3B;AACA,MAAIQ,YAAY,GACd,MACArF,IAAI,CACD7C,OADH,CACW,SADX,EACsB,EADtB;AAAA,GAEGA,OAFH,CAEW,MAFX,EAEmB,GAFnB;AAAA,GAGGA,OAHH,CAGW,qBAHX,EAGkC,MAHlC;AAAA,GAIGA,OAJH,CAIW,SAJX,EAIsB,CAACuH,CAAD,EAAYO,SAAZ,KAAkC;AACpDJ,IAAAA,UAAU,CAAC9H,IAAX,CAAgBkI,SAAhB;AACA,WAAO,WAAP;AACD,GAPH,CAFF;;AAWA,MAAIjF,IAAI,CAACoF,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtBP,IAAAA,UAAU,CAAC9H,IAAX,CAAgB,GAAhB;AACAsI,IAAAA,YAAY,IACVrF,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;AAAA,MAEI,mBAHN,CAFsB;AAMvB,GAND,MAMO;AACLqF,IAAAA,YAAY,IAAInB,GAAG,GACf,OADe;AAAA;AAGf;AACA;AACA;AACA;AACA;AACA,2CARJ;AASD;;AAED,MAAIU,OAAO,GAAG,IAAIU,MAAJ,CAAWD,YAAX,EAAyBtD,aAAa,GAAGxG,SAAH,GAAe,GAArD,CAAd;AAEA,SAAO,CAACqJ,OAAD,EAAUC,UAAV,CAAP;AACD;;AAED,SAASM,wBAAT,CAAkCI,KAAlC,EAAiDN,SAAjD,EAAoE;AAClE,MAAI;AACF,WAAOO,kBAAkB,CAACD,KAAD,CAAzB;AACD,GAFD,CAEE,OAAO9E,KAAP,EAAc;AACd,4CAAAjE,SAAO,CACL,KADK,EAEL,mCAAgCyI,SAAhC,0DACkBM,KADlB,8FAEqC9E,KAFrC,QAFK,CAAP;AAOA,WAAO8E,KAAP;AACD;AACF;AAED;AACA;AACA;;;AACA,AAAO,SAASrE,aAAT,CACL3E,QADK,EAEL0E,QAFK,EAGU;AACf,MAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAO1E,QAAP;;AAEtB,MAAI,CAACA,QAAQ,CAACkJ,WAAT,GAAuBxD,UAAvB,CAAkChB,QAAQ,CAACwE,WAAT,EAAlC,CAAL,EAAgE;AAC9D,WAAO,IAAP;AACD;;AAED,MAAIC,QAAQ,GAAGnJ,QAAQ,CAACE,MAAT,CAAgBwE,QAAQ,CAACxF,MAAzB,CAAf;;AACA,MAAIiK,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;AAChC;AACA,WAAO,IAAP;AACD;;AAED,SAAOnJ,QAAQ,CAACwC,KAAT,CAAekC,QAAQ,CAACxF,MAAxB,KAAmC,GAA1C;AACD;AAED;AACA;AACA;;AAMA,AAAO,SAASyG,SAAT,CAAmBqD,KAAnB,EAA+BjG,OAA/B,EAAiD;AACtD,MAAIiG,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAA7B,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;AACrE,UAAM,IAAI9F,KAAJ,CAAUH,OAAV,CAAN;AACD;AACF;AAED;AACA;AACA;;AACA,AAAO,SAAS9C,SAAT,CAAiB6C,IAAjB,EAA4BC,OAA5B,EAAmD;AACxD,MAAI,CAACD,IAAL,EAAW;AACT;AACA,QAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaF,OAAb;;AAEpC,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAM,IAAIG,KAAJ,CAAUH,OAAV,CAAN,CANE;AAQH,KARD,CAQE,OAAOI,CAAP,EAAU;AACb;AACF;AAED;AACA;AACA;AACA;AACA;;AACA,AAAO,SAASiG,WAAT,CAAqBzJ,EAArB,EAA6B0J,YAA7B,EAAuD;AAAA,MAA1BA,YAA0B;AAA1BA,IAAAA,YAA0B,GAAX,GAAW;AAAA;;AAC5D,MAAI;AACFrJ,IAAAA,QAAQ,EAAEsJ,UADR;AAEFhI,IAAAA,MAAM,GAAG,EAFP;AAGFC,IAAAA,IAAI,GAAG;AAHL,MAIA,OAAO5B,EAAP,KAAc,QAAd,GAAyBkC,SAAS,CAAClC,EAAD,CAAlC,GAAyCA,EAJ7C;AAMA,MAAIK,QAAQ,GAAGsJ,UAAU,GACrBA,UAAU,CAAC5D,UAAX,CAAsB,GAAtB,IACE4D,UADF,GAEEC,eAAe,CAACD,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ;AAMA,SAAO;AACLrJ,IAAAA,QADK;AAELsB,IAAAA,MAAM,EAAEkI,eAAe,CAAClI,MAAD,CAFlB;AAGLC,IAAAA,IAAI,EAAEkI,aAAa,CAAClI,IAAD;AAHd,GAAP;AAKD;;AAED,SAASgI,eAAT,CAAyBhE,YAAzB,EAA+C8D,YAA/C,EAA6E;AAC3E,MAAIvC,QAAQ,GAAGuC,YAAY,CAACzI,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAAiCmG,KAAjC,CAAuC,GAAvC,CAAf;AACA,MAAI2C,gBAAgB,GAAGnE,YAAY,CAACwB,KAAb,CAAmB,GAAnB,CAAvB;AAEA2C,EAAAA,gBAAgB,CAACtE,OAAjB,CAA0BgC,OAAD,IAAa;AACpC,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA,UAAIN,QAAQ,CAAC5H,MAAT,GAAkB,CAAtB,EAAyB4H,QAAQ,CAAC6C,GAAT;AAC1B,KAHD,MAGO,IAAIvC,OAAO,KAAK,GAAhB,EAAqB;AAC1BN,MAAAA,QAAQ,CAACtG,IAAT,CAAc4G,OAAd;AACD;AACF,GAPD;AASA,SAAON,QAAQ,CAAC5H,MAAT,GAAkB,CAAlB,GAAsB4H,QAAQ,CAAC8C,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD;AACD;AAED;AACA;AACA;;;AACA,AAAO,SAASC,SAAT,CACLC,KADK,EAELC,cAFK,EAGLC,gBAHK,EAIC;AACN,MAAIrK,EAAE,GAAG,OAAOmK,KAAP,KAAiB,QAAjB,GAA4BjI,SAAS,CAACiI,KAAD,CAArC,GAA+CA,KAAxD;AACA,MAAIR,UAAU,GAAGQ,KAAK,KAAK,EAAV,IAAgBnK,EAAE,CAACK,QAAH,KAAgB,EAAhC,GAAqC,GAArC,GAA2CL,EAAE,CAACK,QAA/D,CAFM;AAKN;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIiK,IAAJ;;AACA,MAAIX,UAAU,IAAI,IAAlB,EAAwB;AACtBW,IAAAA,IAAI,GAAGD,gBAAP;AACD,GAFD,MAEO;AACL,QAAIE,kBAAkB,GAAGH,cAAc,CAAC7K,MAAf,GAAwB,CAAjD;;AAEA,QAAIoK,UAAU,CAAC5D,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;AAC/B,UAAIyE,UAAU,GAAGb,UAAU,CAACvC,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;AAI/B;AACA;;AACA,aAAOoD,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;AAC7BA,QAAAA,UAAU,CAACC,KAAX;AACAF,QAAAA,kBAAkB,IAAI,CAAtB;AACD;;AAEDvK,MAAAA,EAAE,CAACK,QAAH,GAAcmK,UAAU,CAACP,IAAX,CAAgB,GAAhB,CAAd;AACD,KAfI;AAkBL;;;AACAK,IAAAA,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BH,cAAc,CAACG,kBAAD,CAAxC,GAA+D,GAAtE;AACD;;AAED,MAAIzG,IAAI,GAAG2F,WAAW,CAACzJ,EAAD,EAAKsK,IAAL,CAAtB,CApCM;;AAuCN,MACEX,UAAU,IACVA,UAAU,KAAK,GADf,IAEAA,UAAU,CAACT,QAAX,CAAoB,GAApB,CAFA,IAGA,CAACpF,IAAI,CAACzD,QAAL,CAAc6I,QAAd,CAAuB,GAAvB,CAJH,EAKE;AACApF,IAAAA,IAAI,CAACzD,QAAL,IAAiB,GAAjB;AACD;;AAED,SAAOyD,IAAP;AACD;AAED;AACA;AACA;;AACA,AAAO,SAAS4G,aAAT,CAAuB1K,EAAvB,EAAmD;AACxD;AACA,SAAOA,EAAE,KAAK,EAAP,IAAcA,EAAD,CAAaK,QAAb,KAA0B,EAAvC,GACH,GADG,GAEH,OAAOL,EAAP,KAAc,QAAd,GACAkC,SAAS,CAAClC,EAAD,CAAT,CAAcK,QADd,GAEAL,EAAE,CAACK,QAJP;AAKD;AAED;AACA;AACA;;AACA,MAAa4F,SAAS,GAAI0E,KAAD,IACvBA,KAAK,CAACV,IAAN,CAAW,GAAX,EAAgBhJ,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC,CADK;AAGP;AACA;AACA;;AACA,MAAaqH,iBAAiB,GAAIjI,QAAD,IAC/BA,QAAQ,CAACY,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,CADK;AAGP;AACA;AACA;;AACA,AAAO,MAAM4I,eAAe,GAAIlI,MAAD,IAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACoE,UAAP,CAAkB,GAAlB,IACApE,MADA,GAEA,MAAMA,MALL;AAOP;AACA;AACA;;AACA,AAAO,MAAMmI,aAAa,GAAIlI,IAAD,IAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAACmE,UAAL,CAAgB,GAAhB,IAAuBnE,IAAvB,GAA8B,MAAMA,IAD5D;;AAQP;AACA;AACA;AACA;AACA,MAAagJ,IAAkB,GAAG,SAArBA,IAAqB,CAACC,IAAD,EAAOC,IAAP,EAAqB;AAAA,MAAdA,IAAc;AAAdA,IAAAA,IAAc,GAAP,EAAO;AAAA;;AACrD,MAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;AAAEE,IAAAA,MAAM,EAAEF;AAAV,GAA3B,GAA8CA,IAAjE;AAEA,MAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;;AACA,MAAI,CAACA,OAAO,CAACE,GAAR,CAAY,cAAZ,CAAL,EAAkC;AAChCF,IAAAA,OAAO,CAACG,GAAR,CAAY,cAAZ,EAA4B,iCAA5B;AACD;;AAED,SAAO,IAAIC,QAAJ,CAAa7K,IAAI,CAACC,SAAL,CAAeoK,IAAf,CAAb,eACFE,YADE;AAELE,IAAAA;AAFK,KAAP;AAID,CAZM;;AAmBP;AACA;AACA;AACA;AACA,MAAaK,QAA0B,GAAG,SAA7BA,QAA6B,CAAC5I,GAAD,EAAMoI,IAAN,EAAqB;AAAA,MAAfA,IAAe;AAAfA,IAAAA,IAAe,GAAR,GAAQ;AAAA;;AAC7D,MAAIC,YAAY,GAAGD,IAAnB;;AACA,MAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAf;AACD,GAFD,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;AACrDD,IAAAA,YAAY,CAACC,MAAb,GAAsB,GAAtB;AACD;;AAED,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;AACAA,EAAAA,OAAO,CAACG,GAAR,CAAY,UAAZ,EAAwB1I,GAAxB;AAEA,SAAO,IAAI2I,QAAJ,CAAa,IAAb,eACFN,YADE;AAELE,IAAAA;AAFK,KAAP;AAID,CAfM;AAiBP;AACA;AACA;AACA;;AACA,AAAO,MAAMM,aAAN,CAAoB;AAKzBC,EAAAA,WAAW,CAACR,MAAD,EAAiBS,UAAjB,EAAiDZ,IAAjD,EAA4D;AACrE,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKS,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AACA,SAAKZ,IAAL,GAAYA,IAAZ;AACD;;AATwB;AAY3B;AACA;AACA;AACA;;AACA,AAAO,SAASa,oBAAT,CAA8BlI,CAA9B,EAA0D;AAC/D,SAAOA,CAAC,YAAY+H,aAApB;AACD;;AC1yBD;AACA;;AAEA;AACA;AACA;;IA4SKI;AAML;AACA;AACA;;WARKA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;GAAAA,eAAAA;;AAsEL,MAAaC,eAAyC,GAAG;AACvD3L,EAAAA,KAAK,EAAE,MADgD;AAEvDE,EAAAA,QAAQ,EAAEd,SAF6C;AAGvDwM,EAAAA,UAAU,EAAExM,SAH2C;AAIvDyM,EAAAA,UAAU,EAAEzM,SAJ2C;AAKvD0M,EAAAA,WAAW,EAAE1M,SAL0C;AAMvD2M,EAAAA,QAAQ,EAAE3M;AAN6C,CAAlD;AASP,MAAa4M,YAAmC,GAAG;AACjDhM,EAAAA,KAAK,EAAE,MAD0C;AAEjD4K,EAAAA,IAAI,EAAExL,SAF2C;AAGjDwM,EAAAA,UAAU,EAAExM,SAHqC;AAIjDyM,EAAAA,UAAU,EAAEzM,SAJqC;AAKjD0M,EAAAA,WAAW,EAAE1M,SALoC;AAMjD2M,EAAAA,QAAQ,EAAE3M;AANuC,CAA5C;AAUP;AACA;AACA;;AAEA;AACA;AACA;;AACA,AAAO,SAAS6M,YAAT,CAAsBpB,IAAtB,EAAgD;AAAA;;AACrD,IACEA,IAAI,CAACjG,MAAL,CAAYtF,MAAZ,GAAqB,CADvB,4CAAAyG,SAAS,QAEP,+DAFO,CAAT,GAAAA,SAAS,OAAT;AAKA,MAAImG,UAAU,GAAGC,yBAAyB,CAACtB,IAAI,CAACjG,MAAN,CAA1C,CANqD;;AAQrD,MAAIwH,eAAoC,GAAG,IAA3C,CARqD;;AAUrD,MAAIC,UAAmC,GAAG,IAA1C,CAVqD;;AAYrD,MAAIC,oBAAmD,GAAG,IAA1D,CAZqD;;AAcrD,MAAIC,uBAA+D,GAAG,IAAtE,CAdqD;;AAgBrD,MAAIC,iBAAmD,GAAG,IAA1D,CAhBqD;AAkBrD;AACA;AACA;;AACA,MAAIC,qBAAqB,GAAG,KAA5B;AAEA,MAAIC,cAAc,GAChB/H,WAAW,CAACuH,UAAD,EAAarB,IAAI,CAACpK,OAAL,CAAaP,QAA1B,CAAX,IACAyM,kBAAkB,CAACT,UAAD,CAFpB,CAvBqD;AA4BrD;AACA;;AACA,MAAIU,yBAAyB,GAC3B,wBAAA/B,IAAI,CAACgC,aAAL,yCAAoBC,MAApB,KAA8B,IAA9B,IACA,yBAAAjC,IAAI,CAACgC,aAAL,0CAAoBE,UAApB,KAAkC,IADlC,IAEAL,cAAc,CACXpF,MADH,CACW0F,CAAD,IAAOA,CAAC,CAACvH,KAAF,CAAQwH,MADzB,EAEG5F,IAFH,CAES2F,CAAD;AAAA;;AAAA,WAAO,yBAAAnC,IAAI,CAACgC,aAAL,mEAAoBE,UAApB,2CAAiCC,CAAC,CAACvH,KAAF,CAAQyH,EAAzC,OAAiD9N,SAAxD;AAAA,GAFR,CAHF;;AAOA,MAAIwN,yBAAJ,EAA+B;AAC7BxJ,IAAAA,OAAO,CAACC,IAAR,CACE,oIADF;AAID;;AAED,MAAI8J,MAAJ;AACA,MAAInN,KAAkB,GAAG;AACvBoN,IAAAA,aAAa,EAAEvC,IAAI,CAACpK,OAAL,CAAalB,MADL;AAEvBW,IAAAA,QAAQ,EAAE2K,IAAI,CAACpK,OAAL,CAAaP,QAFA;AAGvB;AACA;AACAiF,IAAAA,OAAO,EAAEuH,cALc;AAMvBW,IAAAA,WAAW,EAAExC,IAAI,CAACgC,aAAL,IAAsB,IAAtB,IAA8B,CAACD,yBANrB;AAOvBU,IAAAA,UAAU,EAAE3B,eAPW;AAQvB4B,IAAAA,qBAAqB,EAAE,IARA;AASvBC,IAAAA,mBAAmB,EAAE,IATE;AAUvBC,IAAAA,YAAY,EAAE,MAVS;AAWvBV,IAAAA,UAAU,EAAEH,yBAAyB,GACjC,EADiC,GAEjC,yBAAA/B,IAAI,CAACgC,aAAL,0CAAoBE,UAApB,KAAkC,EAbf;AAcvBW,IAAAA,UAAU,EAAE,yBAAA7C,IAAI,CAACgC,aAAL,0CAAoBa,UAApB,KAAkC,IAdvB;AAevBZ,IAAAA,MAAM,EAAE,yBAAAjC,IAAI,CAACgC,aAAL,0CAAoBC,MAApB,KAA8B,IAff;AAgBvBa,IAAAA,QAAQ,EAAE,IAAIC,GAAJ;AAhBa,GAAzB,CA7CqD;AAiErD;;AACA,MAAIC,aAAmC,GAAG,IAA1C,CAlEqD;;AAoErD,MAAIC,2BAAJ,CApEqD;AAsErD;;AACA,MAAIC,2BAA2B,GAAG,KAAlC,CAvEqD;AAyErD;AACA;AACA;;AACA,MAAIC,sBAAsB,GAAG,KAA7B,CA5EqD;;AA8ErD,MAAIC,gBAAgB,GAAG,IAAIL,GAAJ,EAAvB,CA9EqD;;AAgFrD,MAAIM,kBAAkB,GAAG,CAAzB,CAhFqD;AAkFrD;AACA;;AACA,MAAIC,uBAAuB,GAAG,CAAC,CAA/B,CApFqD;;AAsFrD,MAAIC,cAAc,GAAG,IAAIR,GAAJ,EAArB,CAtFqD;;AAwFrD,MAAIS,gBAAgB,GAAG,IAAIC,GAAJ,EAAvB,CAxFqD;;AA0FrD,MAAIC,gBAAgB,GAAG,IAAIX,GAAJ,EAAvB,CA1FqD;AA6FrD;AACA;;AACA,WAASY,UAAT,GAAsB;AACpB;AACA;AACApC,IAAAA,eAAe,GAAGvB,IAAI,CAACpK,OAAL,CAAaW,MAAb,CAChB;AAAA,UAAC;AAAE7B,QAAAA,MAAM,EAAE6N,aAAV;AAAyBlN,QAAAA;AAAzB,OAAD;AAAA,aACEuO,eAAe,CAACrB,aAAD,EAAgBlN,QAAhB,CADjB;AAAA,KADgB,CAAlB,CAHoB;;AASpB,QAAI,CAACF,KAAK,CAACqN,WAAX,EAAwB;AACtBoB,MAAAA,eAAe,CAACC,MAAa,CAAClP,GAAf,EAAoBQ,KAAK,CAACE,QAA1B,CAAf;AACD;;AAED,WAAOiN,MAAP;AACD,GA7GoD;;;AAgHrD,WAASwB,OAAT,GAAmB;AAAA;;AACjB,QAAIvC,eAAJ,EAAqB;AACnBA,MAAAA,eAAe;AAChB;;AACDC,IAAAA,UAAU,GAAG,IAAb;AACA,6BAAAyB,2BAA2B,SAA3B,kCAA6Bc,KAA7B;;AACA,SAAK,IAAI,GAAGC,UAAH,CAAT,IAA2BZ,gBAA3B,EAA6C;AAC3CY,MAAAA,UAAU,CAACD,KAAX;AACD;AACF,GAzHoD;;;AA4HrD,WAASE,SAAT,CAAmBzN,EAAnB,EAAyC;AACvC,QAAIgL,UAAJ,EAAgB;AACd,YAAM,IAAI/I,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD+I,IAAAA,UAAU,GAAGhL,EAAb;AACA,WAAO,MAAM;AACXgL,MAAAA,UAAU,GAAG,IAAb;AACD,KAFD;AAGD,GApIoD;;;AAuIrD,WAAS0C,WAAT,CAAqBC,QAArB,EAA2D;AACzDhP,IAAAA,KAAK,gBACAA,KADA,EAEAgP,QAFA,CAAL;AAIA3C,IAAAA,UAAU,QAAV,YAAAA,UAAU,CAAGrM,KAAH,CAAV;AACD,GA7IoD;AAgJrD;AACA;AACA;AACA;;;AACA,WAASiP,kBAAT,CACE7B,aADF,EAEElN,QAFF,EAGE8O,QAHF,EAIQ;AAAA;;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIE,cAAc,GAChBlP,KAAK,CAAC0N,UAAN,IAAoB,IAApB,IACA1N,KAAK,CAACsN,UAAN,CAAiB1B,UAAjB,IAA+B,IAD/B,IAEA5L,KAAK,CAACsN,UAAN,CAAiBtN,KAAjB,KAA2B,SAH7B;AAKA+O,IAAAA,WAAW,cAILG,cAAc,GAAG,EAAH,GAAQ;AAAExB,MAAAA,UAAU,EAAE;AAAd,KAJjB,EAKNsB,QALM;AAMT5B,MAAAA,aANS;AAOTlN,MAAAA,QAPS;AAQTmN,MAAAA,WAAW,EAAE,IARJ;AASTC,MAAAA,UAAU,EAAE3B,eATH;AAUT8B,MAAAA,YAAY,EAAE,MAVL;AAWT;AACAV,MAAAA,UAAU,EAAEoC,eAAe,CAACnP,KAAD,EAAQgP,QAAR,CAZlB;AAaT;AACAzB,MAAAA,qBAAqB,EAAEvN,KAAK,CAACsN,UAAN,CAAiBvB,QAAjB,GACnB,KADmB,GAEnBqD,sBAAsB,CAAClP,QAAD,EAAW8O,QAAQ,CAAC7J,OAAT,IAAoBnF,KAAK,CAACmF,OAArC,CAhBjB;AAiBT;AACAqI,MAAAA,mBAAmB,EAAE,oBAAAtN,QAAQ,CAACF,KAAT,qCAAgBqP,qBAAhB,MAA0C;AAlBtD,OAAX;;AAqBA,QAAItB,2BAAJ,EAAiC,CAAjC,MAEO,IAAIX,aAAa,KAAKsB,MAAa,CAAClP,GAApC,EAAyC,CAAzC,MAEA,IAAI4N,aAAa,KAAKsB,MAAa,CAAC7N,IAApC,EAA0C;AAC/CgK,MAAAA,IAAI,CAACpK,OAAL,CAAaG,IAAb,CAAkBV,QAAlB,EAA4BA,QAAQ,CAACF,KAArC;AACD,KAFM,MAEA,IAAIoN,aAAa,KAAKsB,MAAa,CAACzN,OAApC,EAA6C;AAClD4J,MAAAA,IAAI,CAACpK,OAAL,CAAaO,OAAb,CAAqBd,QAArB,EAA+BA,QAAQ,CAACF,KAAxC;AACD,KA3CK;;;AA8CN6N,IAAAA,aAAa,GAAG,IAAhB;AACAE,IAAAA,2BAA2B,GAAG,KAA9B;AACAC,IAAAA,sBAAsB,GAAG,KAAzB;AACD,GAzMoD;AA4MrD;;;AACA,iBAAesB,QAAf,CACEzL,IADF,EAEE0L,IAFF,EAGiB;AACf,QAAI,OAAO1L,IAAP,KAAgB,QAApB,EAA8B;AAC5BgH,MAAAA,IAAI,CAACpK,OAAL,CAAaS,EAAb,CAAgB2C,IAAhB;AACA;AACD;;AAED,QAAI3D,QAAQ,GAAGC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiB2D,IAAjB,EAAuB0L,IAAvB,oBAAuBA,IAAI,CAAEvP,KAA7B,CAA7B;AACA,QAAIoN,aAAa,GAAGmC,IAAI,QAAJ,IAAAA,IAAI,CAAEvO,OAAN,GAChB0N,MAAa,CAACzN,OADE,GAEhByN,MAAa,CAAC7N,IAFlB;;AAIA,QAAI2O,sBAAsB,CAACD,IAAD,CAA1B,EAAkC;AAChC,aAAO,MAAMd,eAAe,CAACrB,aAAD,EAAgBlN,QAAhB,EAA0B;AACpDuP,QAAAA,UAAU,EAAE;AACV7D,UAAAA,UAAU,EAAE2D,IAAI,CAAC3D,UAAL,IAAmB,KADrB;AAEVC,UAAAA,UAAU,EAAEnL,UAAU,CAACR,QAAD,CAFZ;AAGV4L,UAAAA,WAAW,EAAE,CAAAyD,IAAI,QAAJ,YAAAA,IAAI,CAAEzD,WAAN,KAAqB,mCAHxB;AAIVC,UAAAA,QAAQ,EAAEwD,IAAI,CAACxD;AAJL;AADwC,OAA1B,CAA5B;AAQD;;AAED,WAAO,MAAM0C,eAAe,CAACrB,aAAD,EAAgBlN,QAAhB,CAA5B;AACD,GAvOoD;AA0OrD;AACA;;;AACA,WAASwP,UAAT,GAAsB;AACpB;AACA;AACA1B,IAAAA,sBAAsB,GAAG,IAAzB;AACAe,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,YAAY,EAAE;AAAhB,KAAD,CAAX,CAJoB;AAOpB;;AACA,QACEzN,KAAK,CAACsN,UAAN,CAAiBtN,KAAjB,KAA2B,YAA3B,IACAA,KAAK,CAACsN,UAAN,CAAiB1B,UAAjB,KAAgC,KAFlC,EAGE;AACA;AACD,KAbmB;AAgBpB;AACA;;;AACA,QAAI5L,KAAK,CAACsN,UAAN,CAAiBtN,KAAjB,KAA2B,MAA/B,EAAuC;AACrCyO,MAAAA,eAAe,CAACzO,KAAK,CAACoN,aAAP,EAAsBpN,KAAK,CAACE,QAA5B,EAAsC;AACnDyP,QAAAA,8BAA8B,EAAE;AADmB,OAAtC,CAAf;AAGA;AACD,KAvBmB;AA0BpB;AACA;;;AACAlB,IAAAA,eAAe,CACbZ,aAAa,IAAI7N,KAAK,CAACoN,aADV,EAEbpN,KAAK,CAACsN,UAAN,CAAiBpN,QAFJ,EAGb;AAAE0P,MAAAA,kBAAkB,EAAE5P,KAAK,CAACsN;AAA5B,KAHa,CAAf;AAKD,GA7QoD;AAgRrD;AACA;;;AACA,iBAAemB,eAAf,CACErB,aADF,EAEElN,QAFF,EAGEqP,IAHF,EAQiB;AAAA;;AACf;AACA,8BAAAzB,2BAA2B,SAA3B,mCAA6Bc,KAA7B;AACAf,IAAAA,aAAa,GAAGT,aAAhB,CAHe;AAMf;;AACAW,IAAAA,2BAA2B,GAAG,CAAAwB,IAAI,QAAJ,YAAAA,IAAI,CAAEI,8BAAN,MAAyC,IAAvE,CAPe;;AAUfE,IAAAA,kBAAkB,CAAC7P,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACmF,OAAvB,CAAlB;AAEA,QAAI2K,iBAAiB,GAAGP,IAAH,oBAAGA,IAAI,CAAEK,kBAA9B;AACA,QAAIzK,OAAO,GAAGR,WAAW,CAACuH,UAAD,EAAahM,QAAb,CAAzB,CAbe;;AAgBf,QAAI,CAACiF,OAAL,EAAc;AACZ8J,MAAAA,kBAAkB,CAAC7B,aAAD,EAAgBlN,QAAhB,EAA0B;AAC1CiF,QAAAA,OAAO,EAAEwH,kBAAkB,CAACT,UAAD,CADe;AAE1CY,QAAAA,MAAM,EAAE;AACN,WAACZ,UAAU,CAAC,CAAD,CAAV,CAAcgB,EAAf,GAAoB,IAAI9B,QAAJ,CAAa,IAAb,EAAmB;AAAEL,YAAAA,MAAM,EAAE;AAAV,WAAnB;AADd;AAFkC,OAA1B,CAAlB;AAMA;AACD,KAxBc;;;AA2Bf,QAAIgF,gBAAgB,CAAC/P,KAAK,CAACE,QAAP,EAAiBA,QAAjB,CAApB,EAAgD;AAC9C+O,MAAAA,kBAAkB,CAAC7B,aAAD,EAAgBlN,QAAhB,EAA0B;AAC1CiF,QAAAA;AAD0C,OAA1B,CAAlB;AAGA;AACD,KAhCc;;;AAmCf,QAAI6K,iBAAmC,GAAG,IAA1C;AACA,QAAIC,kBAAoC,GAAG,IAA3C;;AAEA,QAAIV,IAAI,QAAJ,IAAAA,IAAI,CAAEE,UAAN,IAAoBS,kBAAkB,CAACX,IAAI,CAACE,UAAN,CAA1C,EAA6D;AAC3D,UAAIU,YAAY,GAAG,MAAMC,YAAY,CACnChD,aADmC,EAEnClN,QAFmC,EAGnCqP,IAAI,CAACE,UAH8B,EAInCtK,OAJmC,CAArC;;AAOA,UAAIgL,YAAY,CAACE,cAAjB,EAAiC;AAC/B;AACD;;AAEDL,MAAAA,iBAAiB,GAAGG,YAAY,CAACH,iBAAb,IAAkC,IAAtD;AACAC,MAAAA,kBAAkB,GAAGE,YAAY,CAACF,kBAAb,IAAmC,IAAxD;;AACA,UAAI3C,UAAuC;AACzCtN,QAAAA,KAAK,EAAE,SADkC;AAEzCE,QAAAA;AAFyC,SAGtCqP,IAAI,CAACE,UAHiC,CAA3C;;AAKAK,MAAAA,iBAAiB,GAAGxC,UAApB;AACD,KA1Dc;;;AA6Df,QAAI;AAAE+C,MAAAA,cAAF;AAAkBtD,MAAAA,UAAlB;AAA8BD,MAAAA;AAA9B,QAAyC,MAAMwD,aAAa,CAC9DlD,aAD8D,EAE9DlN,QAF8D,EAG9DqP,IAH8D,oBAG9DA,IAAI,CAAEE,UAHwD,EAI9DtK,OAJ8D,EAK9D2K,iBAL8D,EAM9DE,iBAN8D,EAO9DC,kBAP8D,CAAhE;;AAUA,QAAII,cAAJ,EAAoB;AAClB;AACD;;AAEDpB,IAAAA,kBAAkB,CAAC7B,aAAD,EAAgBlN,QAAhB,EAA0B;AAC1CiF,MAAAA,OAD0C;AAE1C4H,MAAAA,UAF0C;AAG1CD,MAAAA;AAH0C,KAA1B,CAAlB;AAKD,GA1WoD;AA6WrD;;;AACA,iBAAesD,YAAf,CACEhD,aADF,EAEElN,QAFF,EAGEuP,UAHF,EAIEtK,OAJF,EAK+B;AAC7B6I,IAAAA,sBAAsB,GAAG,IAAzB;;AAEA,QACE7I,OAAO,CAACA,OAAO,CAAC7F,MAAR,GAAiB,CAAlB,CAAP,CAA4BmG,KAA5B,CAAkCvG,KAAlC,IACA,CAACqR,kBAAkB,CAACrQ,QAAQ,CAACwB,MAAV,CAFrB,EAGE;AACA;AACA;AACA;AACAyD,MAAAA,OAAO,GAAGA,OAAO,CAACvC,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAV;AACD,KAX4B;;;AAc7B,QAAI0K,UAA0C;AAC5CtN,MAAAA,KAAK,EAAE,YADqC;AAE5CE,MAAAA;AAF4C,OAGzCuP,UAHyC,CAA9C;;AAKAV,IAAAA,WAAW,CAAC;AAAEzB,MAAAA;AAAF,KAAD,CAAX,CAnB6B;;AAsB7B,QAAIkD,MAAJ;AAEA,QAAIC,WAAW,GAAGtL,OAAO,CAACvC,KAAR,CAAc,CAAC,CAAf,EAAkB,CAAlB,CAAlB;;AACA,QAAI,CAAC6N,WAAW,CAAChL,KAAZ,CAAkBlG,MAAvB,EAA+B;AAC7B,iDAAa;AACX6D,QAAAA,OAAO,CAACC,IAAR,CACE,0EACE,6DADF,UAEM3C,UAAU,CAACR,QAAD,CAFhB,OADF;AAKD;;AACDsQ,MAAAA,MAAM,GAAG;AACPE,QAAAA,IAAI,EAAEhF,UAAU,CAACpH,KADV;AAEPA,QAAAA,KAAK,EAAE,IAAI8G,QAAJ,CAAa,IAAb,EAAmB;AAAEL,UAAAA,MAAM,EAAE;AAAV,SAAnB;AAFA,OAAT;AAID,KAZD,MAYO;AACL;AACA,UAAI4F,qBAAqB,GAAG,IAAIC,eAAJ,EAA5B;AACA9C,MAAAA,2BAA2B,GAAG6C,qBAA9B;AAEAH,MAAAA,MAAM,GAAG,MAAMK,kBAAkB,CAC/BJ,WAD+B,EAE/BvQ,QAF+B,EAG/ByQ,qBAAqB,CAACG,MAHS,EAI/BrB,UAJ+B,CAAjC;;AAOA,UAAIkB,qBAAqB,CAACG,MAAtB,CAA6BC,OAAjC,EAA0C;AACxC,eAAO;AAAEV,UAAAA,cAAc,EAAE;AAAlB,SAAP;AACD,OAdI;AAiBL;AACA;;;AACAvC,MAAAA,2BAA2B,GAAG,IAA9B;AACD,KAzD4B;;;AA4D7B,QAAIkD,gBAAgB,CAACR,MAAD,CAApB,EAA8B;AAC5B,UAAIS,kBAA+C;AACjDjR,QAAAA,KAAK,EAAE,SAD0C;AAEjDE,QAAAA,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBsQ,MAAM,CAACtQ,QAAxB;AAFyB,SAG9CuP,UAH8C,CAAnD;;AAKA,YAAMyB,uBAAuB,CAACV,MAAD,EAASS,kBAAT,CAA7B;AACA,aAAO;AAAEZ,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACD;;AAED,QAAIc,aAAa,CAACX,MAAD,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIY,aAAa,GAAGC,mBAAmB,CAAClM,OAAD,EAAUsL,WAAW,CAAChL,KAAZ,CAAkByH,EAA5B,CAAvC;AACA,aAAO;AACL+C,QAAAA,kBAAkB,EAAE;AAAE,WAACmB,aAAa,CAAC3L,KAAd,CAAoByH,EAArB,GAA0BsD,MAAM,CAAClM;AAAnC;AADf,OAAP;AAGD;;AAED,WAAO;AACL0L,MAAAA,iBAAiB,EAAE;AAAE,SAACS,WAAW,CAAChL,KAAZ,CAAkByH,EAAnB,GAAwBsD,MAAM,CAAC5F;AAAjC;AADd,KAAP;AAGD,GArcoD;AAwcrD;;;AACA,iBAAe0F,aAAf,CACElD,aADF,EAEElN,QAFF,EAGEuP,UAHF,EAIEtK,OAJF,EAKEyK,kBALF,EAMEI,iBANF,EAOEC,kBAPF,EAQgC;AAC9B;AACA,QAAIH,iBAAJ;;AAEA,QAAIF,kBAAJ,EAAwB;AACtBE,MAAAA,iBAAiB,GAAGF,kBAApB;AACD,KAFD,MAEO,IAAI,CAAAH,UAAU,QAAV,YAAAA,UAAU,CAAE7D,UAAZ,MAA2B,KAA/B,EAAsC;AAC3C,UAAI0B,UAA0C;AAC5CtN,QAAAA,KAAK,EAAE,YADqC;AAE5CE,QAAAA;AAF4C,SAGzCuP,UAHyC,CAA9C;;AAKAK,MAAAA,iBAAiB,GAAGxC,UAApB;AACD,KAPM,MAOA;AACL,UAAIA,UAAuC,GAAG;AAC5CtN,QAAAA,KAAK,EAAE,SADqC;AAE5CE,QAAAA,QAF4C;AAG5C0L,QAAAA,UAAU,EAAExM,SAHgC;AAI5CyM,QAAAA,UAAU,EAAEzM,SAJgC;AAK5C0M,QAAAA,WAAW,EAAE1M,SAL+B;AAM5C2M,QAAAA,QAAQ,EAAE3M;AANkC,OAA9C;AAQA0Q,MAAAA,iBAAiB,GAAGxC,UAApB;AACD;;AAED,QAAI,CAACgE,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DxR,KAD0D,EAE1DmF,OAF0D,EAG1DsK,UAH0D,EAI1DvP,QAJ0D,EAK1D8N,sBAL0D,EAM1DgC,iBAN0D,EAO1DC,kBAP0D,EAQ1D1B,gBAR0D,CAA5D,CAzB8B;;AAqC9B,QAAI+C,aAAa,CAAChS,MAAd,KAAyB,CAAzB,IAA8BiS,oBAAoB,CAACjS,MAArB,KAAgC,CAAlE,EAAqE;AACnE2P,MAAAA,kBAAkB,CAAC7B,aAAD,EAAgBlN,QAAhB,EAA0B;AAC1CiF,QAAAA,OAD0C;AAE1C;AACA2H,QAAAA,MAAM,EAAEmD,kBAAkB,IAAI,IAHY;AAI1CvC,QAAAA,UAAU,EAAEsC,iBAAiB,IAAI;AAJS,OAA1B,CAAlB;AAMA,aAAO;AAAEK,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACD,KA7C6B;AAgD9B;AACA;AACA;;;AACA,QAAI,CAACtC,2BAAL,EAAkC;AAChCwD,MAAAA,oBAAoB,CAAC/L,OAArB,CAA6B,SAAW;AAAA;;AAAA,YAAV,CAACvF,GAAD,CAAU;AACtC,YAAIwR,mBAA6C,GAAG;AAClDzR,UAAAA,KAAK,EAAE,SAD2C;AAElD4K,UAAAA,IAAI,yBAAE5K,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,CAAF,qBAAE,oBAAyB2K,IAFmB;AAGlDgB,UAAAA,UAAU,EAAExM,SAHsC;AAIlDyM,UAAAA,UAAU,EAAEzM,SAJsC;AAKlD0M,UAAAA,WAAW,EAAE1M,SALqC;AAMlD2M,UAAAA,QAAQ,EAAE3M;AANwC,SAApD;AAQAY,QAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBwR,mBAAxB;AACD,OAVD;AAWA1C,MAAAA,WAAW;AACTzB,QAAAA,UAAU,EAAEwC,iBADH;AAETpC,QAAAA,UAAU,EAAEsC,iBAAiB,IAAIhQ,KAAK,CAAC0N,UAA3B,IAAyC;AAF5C,SAGL6D,oBAAoB,CAACjS,MAArB,GAA8B,CAA9B,GACA;AAAEqO,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,OADA,GAEA,EALK,EAAX;AAOD,KAtE6B;;;AAyE9B,QAAIgE,eAAe,GAAG,IAAIf,eAAJ,EAAtB;AACA9C,IAAAA,2BAA2B,GAAG6D,eAA9B;AACAxD,IAAAA,uBAAuB,GAAG,EAAED,kBAA5B;AACAqD,IAAAA,oBAAoB,CAAC/L,OAArB,CAA6B;AAAA,UAAC,CAACvF,GAAD,CAAD;AAAA,aAC3BgO,gBAAgB,CAAC9C,GAAjB,CAAqBlL,GAArB,EAA0B0R,eAA1B,CAD2B;AAAA,KAA7B,EA5E8B;AAiF9B;AACA;;AACA,QAAIC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9B,GAAGR,aAAa,CAACtS,GAAd,CAAmBgO,CAAD,IACnB6D,kBAAkB,CAAC7D,CAAD,EAAI9M,QAAJ,EAAcyR,eAAe,CAACb,MAA9B,CADjB,CAD2B,EAI9B,GAAGS,oBAAoB,CAACvS,GAArB,CAAyB;AAAA,UAAC,GAAGuD,IAAH,EAAS0F,KAAT,CAAD;AAAA,aAC1B4I,kBAAkB,CAAC5I,KAAD,EAAQ1F,IAAR,EAAcoP,eAAe,CAACb,MAA9B,CADQ;AAAA,KAAzB,CAJ2B,CAAZ,CAApB;AAQA,QAAIiB,iBAAiB,GAAGH,OAAO,CAAChP,KAAR,CAAc,CAAd,EAAiB0O,aAAa,CAAChS,MAA/B,CAAxB;AACA,QAAI0S,cAAc,GAAGJ,OAAO,CAAChP,KAAR,CAAc0O,aAAa,CAAChS,MAA5B,CAArB;;AAEA,QAAIqS,eAAe,CAACb,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC,aAAO;AAAEV,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACD,KAhG6B;AAmG9B;AACA;;;AACAvC,IAAAA,2BAA2B,GAAG,IAA9B;AACAyD,IAAAA,oBAAoB,CAAC/L,OAArB,CAA8BvF,GAAD,IAASgO,gBAAgB,CAACgE,MAAjB,CAAwBhS,GAAxB,CAAtC,EAtG8B;;AAyG9B,QAAIoL,QAAQ,GAAG6G,YAAY,CAACN,OAAD,CAA3B;;AACA,QAAIvG,QAAJ,EAAc;AACZ,UAAI4F,kBAAkB,GAAGkB,iBAAiB,CAACnS,KAAD,EAAQqL,QAAR,CAA1C;AACA,YAAM6F,uBAAuB,CAAC7F,QAAD,EAAW4F,kBAAX,CAA7B;AACA,aAAO;AAAEZ,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACD,KA9G6B;;;AAiH9B,QAAI;AAAEtD,MAAAA,UAAF;AAAcD,MAAAA;AAAd,QAAyBsF,iBAAiB,CAC5CpS,KAD4C,EAE5CmF,OAF4C,EAG5CmM,aAH4C,EAI5CS,iBAJ4C,EAK5C9B,kBAL4C,EAM5CsB,oBAN4C,EAO5CS,cAP4C,CAA9C;AAUAK,IAAAA,sBAAsB;AACtB,QAAIC,kBAAkB,GAAGC,oBAAoB,CAACpE,uBAAD,CAA7C;AAEA;AACEpB,MAAAA,UADF;AAEED,MAAAA;AAFF,OAGMwF,kBAAkB,IAAIf,oBAAoB,CAACjS,MAArB,GAA8B,CAApD,GACA;AAAEqO,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,KADA,GAEA,EALN;AAOD;;AAED,WAAS6E,UAAT,CAAiCvS,GAAjC,EAA8D;AAC5D,WAAOD,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,KAA2B+L,YAAlC;AACD,GA1lBoD;;;AA6lBrD,WAASyG,KAAT,CAAexS,GAAf,EAA4BsC,IAA5B,EAA0CgN,IAA1C,EAAkE;AAAA;;AAChE,QAAI,OAAOqB,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,YAAM,IAAItN,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN;AAKD;;AAED,QAAI6B,OAAO,GAAGR,WAAW,CAACuH,UAAD,EAAa3J,IAAb,CAAzB;AACA,KAAU4C,OAAV,2CAAAY,SAAS,6CAA6CxD,IAA7C,CAAT,GAAAwD,SAAS,OAAT;AAEA,QAAIkI,gBAAgB,CAAC/C,GAAjB,CAAqBjL,GAArB,CAAJ,EAA+ByS,YAAY,CAACzS,GAAD,CAAZ;AAE/B,QAAIgI,KAAK,GACP9C,OAAO,CAACA,OAAO,CAAC7F,MAAR,GAAiB,CAAlB,CAAP,CAA4BmG,KAA5B,CAAkCvG,KAAlC,IACA,CAACqR,kBAAkB,CAACtO,SAAS,CAACM,IAAD,CAAT,CAAgBb,MAAhB,IAA0B,EAA3B,CADnB,GAEIyD,OAAO,CAACvC,KAAR,CAAc,CAAC,CAAf,EAAkB,CAAlB,CAFJ,GAGIuC,OAAO,CAACvC,KAAR,CAAc,CAAC,CAAf,EAAkB,CAAlB,CAJN;;AAMA,QAAI4M,sBAAsB,CAACD,IAAD,CAA1B,EAAkC;AAAA;;AAChC,UAAIE,UAAsB,GAAG;AAC3B7D,QAAAA,UAAU,EAAE2D,IAAI,CAAC3D,UAAL,IAAmB,KADJ;AAE3BC,QAAAA,UAAU,EAAEtJ,IAFe;AAG3BuJ,QAAAA,WAAW,EAAEyD,IAAI,CAACzD,WAAL,IAAoB,mCAHN;AAI3BC,QAAAA,QAAQ,EAAEwD,IAAI,CAACxD;AAJY,OAA7B;;AAOA,UAAImE,kBAAkB,CAACT,UAAD,CAAtB,EAAoC;AAClCkD,QAAAA,mBAAmB,CAAC1S,GAAD,EAAMsC,IAAN,EAAY0F,KAAZ,EAAmBwH,UAAnB,CAAnB;AACA;AACD;;AAED,UAAImD,cAA2C;AAC7C5S,QAAAA,KAAK,EAAE;AADsC,SAE1CyP,UAF0C;AAG7C7E,QAAAA,IAAI,EAAE,yBAAA5K,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,2CAAyB2K,IAAzB,KAAiCxL;AAHM,QAA/C;;AAKAyT,MAAAA,mBAAmB,CAAC5S,GAAD,EAAMsC,IAAN,EAAY0F,KAAZ,EAAmB2K,cAAnB,CAAnB;AACA;AACD;;AAED,QAAIA,cAAwC,GAAG;AAC7C5S,MAAAA,KAAK,EAAE,SADsC;AAE7C4L,MAAAA,UAAU,EAAExM,SAFiC;AAG7CyM,MAAAA,UAAU,EAAEzM,SAHiC;AAI7C0M,MAAAA,WAAW,EAAE1M,SAJgC;AAK7C2M,MAAAA,QAAQ,EAAE3M,SALmC;AAM7CwL,MAAAA,IAAI,EAAE,yBAAA5K,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,2CAAyB2K,IAAzB,KAAiCxL;AANM,KAA/C;AAQAyT,IAAAA,mBAAmB,CAAC5S,GAAD,EAAMsC,IAAN,EAAY0F,KAAZ,EAAmB2K,cAAnB,CAAnB;AACD,GAhpBoD;AAmpBrD;;;AACA,iBAAeD,mBAAf,CACE1S,GADF,EAEEsC,IAFF,EAGE0F,KAHF,EAIEwH,UAJF,EAKE;AAAA;;AACAzB,IAAAA,sBAAsB,GAAG,IAAzB;AACAO,IAAAA,gBAAgB,CAAC0D,MAAjB,CAAwBhS,GAAxB,EAFA;;AAKA,QAAI6S,OAAoC;AACtC9S,MAAAA,KAAK,EAAE;AAD+B,OAEnCyP,UAFmC;AAGtC7E,MAAAA,IAAI,EAAE,yBAAA5K,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,2CAAyB2K,IAAzB,KAAiCxL;AAHD,MAAxC;;AAKAY,IAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwB6S,OAAxB;AACA/D,IAAAA,WAAW,CAAC;AAAEpB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,KAAD,CAAX,CAXA;;AAcA,QAAIgE,eAAe,GAAG,IAAIf,eAAJ,EAAtB;AACA3C,IAAAA,gBAAgB,CAAC9C,GAAjB,CAAqBlL,GAArB,EAA0B0R,eAA1B;AAEA,QAAIoB,YAAY,GAAG,MAAMlC,kBAAkB,CACzC5I,KADyC,EAEzC1F,IAFyC,EAGzCoP,eAAe,CAACb,MAHyB,EAIzCrB,UAJyC,CAA3C;;AAOA,QAAIkC,eAAe,CAACb,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC;AACD;;AAED,QAAIC,gBAAgB,CAAC+B,YAAD,CAApB,EAAoC;AAClC1E,MAAAA,gBAAgB,CAAC2E,GAAjB,CAAqB/S,GAArB;;AACA,UAAI2S,cAAwC;AAC1C5S,QAAAA,KAAK,EAAE;AADmC,SAEvCyP,UAFuC;AAG1C7E,QAAAA,IAAI,EAAExL;AAHoC,QAA5C;;AAKAY,MAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwB2S,cAAxB;AACA7D,MAAAA,WAAW,CAAC;AAAEpB,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,OAAD,CAAX;;AAEA,UAAIsD,kBAA+C;AACjDjR,QAAAA,KAAK,EAAE,SAD0C;AAEjDE,QAAAA,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiB6S,YAAY,CAAC7S,QAA9B;AAFyB,SAG9CuP,UAH8C,CAAnD;;AAKA,YAAMyB,uBAAuB,CAAC6B,YAAD,EAAe9B,kBAAf,CAA7B;AACA;AACD,KA7CD;;;AAgDA,QAAIE,aAAa,CAAC4B,YAAD,CAAjB,EAAiC;AAC/B,UAAI3B,aAAa,GAAGC,mBAAmB,CAACrR,KAAK,CAACmF,OAAP,EAAgB8C,KAAK,CAACxC,KAAN,CAAYyH,EAA5B,CAAvC;AACAlN,MAAAA,KAAK,CAAC2N,QAAN,CAAesE,MAAf,CAAsBhS,GAAtB;AACA8O,MAAAA,WAAW,CAAC;AACVpB,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd,CADA;AAEVb,QAAAA,MAAM,EAAE;AACN,WAACsE,aAAa,CAAC3L,KAAd,CAAoByH,EAArB,GAA0B6F,YAAY,CAACzO;AADjC;AAFE,OAAD,CAAX;AAMA;AACD,KA1DD;AA6DA;;;AACA,QAAIxD,YAAY,GAAGd,KAAK,CAACsN,UAAN,CAAiBpN,QAAjB,IAA6BF,KAAK,CAACE,QAAtD;AACA,QAAIiF,OAAO,GACTnF,KAAK,CAACsN,UAAN,CAAiBtN,KAAjB,KAA2B,MAA3B,GACI2E,WAAW,CAACuH,UAAD,EAAalM,KAAK,CAACsN,UAAN,CAAiBpN,QAA9B,CADf,GAEIF,KAAK,CAACmF,OAHZ;AAKA,KAAUA,OAAV,2CAAAY,SAAS,QAAU,8CAAV,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAIkN,MAAM,GAAG,EAAE/E,kBAAf;AACAE,IAAAA,cAAc,CAACjD,GAAf,CAAmBlL,GAAnB,EAAwBgT,MAAxB;;AAEA,QAAIC,WAAqC;AACvClT,MAAAA,KAAK,EAAE,SADgC;AAEvC4K,MAAAA,IAAI,EAAEmI,YAAY,CAACnI;AAFoB,OAGpC6E,UAHoC,CAAzC;;AAKAzP,IAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBiT,WAAxB;AAEA,QAAI,CAAC5B,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DxR,KAD0D,EAE1DmF,OAF0D,EAG1DsK,UAH0D,EAI1D3O,YAJ0D,EAK1DkN,sBAL0D,EAM1D,IAN0D,EAO1D,IAP0D,EAQ1DO,gBAR0D,CAA5D,CAhFA;AA4FA;AACA;;AACAgD,IAAAA,oBAAoB,CACjBjK,MADH,CACU;AAAA,UAAC,CAAC6L,QAAD,CAAD;AAAA,aAAgBA,QAAQ,KAAKlT,GAA7B;AAAA,KADV,EAEGuF,OAFH,CAEW,SAAgB;AAAA;;AAAA,UAAf,CAAC2N,QAAD,CAAe;AACvB,UAAI1B,mBAA6C,GAAG;AAClDzR,QAAAA,KAAK,EAAE,SAD2C;AAElD4K,QAAAA,IAAI,0BAAE5K,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,CAAF,qBAAE,qBAAyB2K,IAFmB;AAGlDgB,QAAAA,UAAU,EAAExM,SAHsC;AAIlDyM,QAAAA,UAAU,EAAEzM,SAJsC;AAKlD0M,QAAAA,WAAW,EAAE1M,SALqC;AAMlD2M,QAAAA,QAAQ,EAAE3M;AANwC,OAApD;AAQAY,MAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBgI,QAAnB,EAA6B1B,mBAA7B;AACAxD,MAAAA,gBAAgB,CAAC9C,GAAjB,CAAqBgI,QAArB,EAA+BxB,eAA/B;AACD,KAbH;AAeA5C,IAAAA,WAAW,CAAC;AAAEpB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,KAAD,CAAX,CA7GA;AAgHA;AACA;;AACA,QAAIiE,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9B,GAAGR,aAAa,CAACtS,GAAd,CAAmBgO,CAAD,IACnB6D,kBAAkB,CAAC7D,CAAD,EAAIlM,YAAJ,EAAkB6Q,eAAe,CAACb,MAAlC,CADjB,CAD2B,EAI9B,GAAGS,oBAAoB,CAACvS,GAArB,CAAyB;AAAA,UAAC,GAAGuD,IAAH,EAAS0F,KAAT,CAAD;AAAA,aAC1B4I,kBAAkB,CAAC5I,KAAD,EAAQ1F,IAAR,EAAcoP,eAAe,CAACb,MAA9B,CADQ;AAAA,KAAzB,CAJ2B,CAAZ,CAApB;AAQA,QAAIsC,aAAa,GAAGxB,OAAO,CAAChP,KAAR,CAAc,CAAd,EAAiB0O,aAAa,CAAChS,MAA/B,CAApB;AACA,QAAI0S,cAAc,GAAGJ,OAAO,CAAChP,KAAR,CAAc0O,aAAa,CAAChS,MAA5B,CAArB;;AAEA,QAAIqS,eAAe,CAACb,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC;AACD;;AAED3C,IAAAA,cAAc,CAAC6D,MAAf,CAAsBhS,GAAtB;AACAgO,IAAAA,gBAAgB,CAACgE,MAAjB,CAAwBhS,GAAxB;AACAsR,IAAAA,oBAAoB,CAAC/L,OAArB,CAA8B2N,QAAD,IAC3BlF,gBAAgB,CAACgE,MAAjB,CAAwBkB,QAAxB,CADF;AAIA,QAAIE,cAAc,GAAGnB,YAAY,CAACkB,aAAD,CAAjC;;AACA,QAAIC,cAAJ,EAAoB;AAClB,UAAIpC,kBAAkB,GAAGkB,iBAAiB,CAACnS,KAAD,EAAQqT,cAAR,CAA1C;AACA,YAAMnC,uBAAuB,CAACmC,cAAD,EAAiBpC,kBAAjB,CAA7B;AACA;AACD,KA5ID;;;AA+IA,QAAI;AAAElE,MAAAA,UAAF;AAAcD,MAAAA;AAAd,QAAyBsF,iBAAiB,CAC5CpS,KAD4C,EAE5CA,KAAK,CAACmF,OAFsC,EAG5CmM,aAH4C,EAI5C8B,aAJ4C,EAK5C,IAL4C,EAM5C7B,oBAN4C,EAO5CS,cAP4C,CAA9C;AAUA,QAAIsB,WAAkC,GAAG;AACvCtT,MAAAA,KAAK,EAAE,MADgC;AAEvC4K,MAAAA,IAAI,EAAEmI,YAAY,CAACnI,IAFoB;AAGvCgB,MAAAA,UAAU,EAAExM,SAH2B;AAIvCyM,MAAAA,UAAU,EAAEzM,SAJ2B;AAKvC0M,MAAAA,WAAW,EAAE1M,SAL0B;AAMvC2M,MAAAA,QAAQ,EAAE3M;AAN6B,KAAzC;AAQAY,IAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBqT,WAAxB;AAEA,QAAIhB,kBAAkB,GAAGC,oBAAoB,CAACU,MAAD,CAA7C,CAnKA;AAsKA;AACA;;AACA,QACEjT,KAAK,CAACsN,UAAN,CAAiBtN,KAAjB,KAA2B,SAA3B,IACAiT,MAAM,GAAG9E,uBAFX,EAGE;AAAA;;AACA,OAAUN,aAAV,2CAAA9H,SAAS,QAAgB,yBAAhB,CAAT,GAAAA,SAAS,OAAT;AACA,gCAAA+H,2BAA2B,SAA3B,mCAA6Bc,KAA7B;AAEAK,MAAAA,kBAAkB,CAACpB,aAAD,EAAgB7N,KAAK,CAACsN,UAAN,CAAiBpN,QAAjC,EAA2C;AAC3DiF,QAAAA,OAD2D;AAE3D4H,QAAAA,UAF2D;AAG3DD,QAAAA,MAH2D;AAI3Da,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAJiD,OAA3C,CAAlB;AAMD,KAbD,MAaO;AACL;AACAoB,MAAAA,WAAW;AACTjC,QAAAA,MADS;AAETC,QAAAA;AAFS,SAGLuF,kBAAkB,GAAG;AAAE3E,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,OAAH,GAA2C,EAHxD,EAAX;AAKAK,MAAAA,sBAAsB,GAAG,KAAzB;AACD;AACF,GAv1BoD;;;AA01BrD,iBAAe6E,mBAAf,CACE5S,GADF,EAEEsC,IAFF,EAGE0F,KAHF,EAIE2K,cAJF,EAKE;AACA;AACA5S,IAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwB2S,cAAxB;AACA7D,IAAAA,WAAW,CAAC;AAAEpB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,KAAD,CAAX,CAHA;AAMA;;AACAY,IAAAA,gBAAgB,CAACpD,GAAjB,CAAqBlL,GAArB,EAA0B,CAACsC,IAAD,EAAO0F,KAAP,CAA1B,EAPA;;AAUA,QAAI0J,eAAe,GAAG,IAAIf,eAAJ,EAAtB;AACA3C,IAAAA,gBAAgB,CAAC9C,GAAjB,CAAqBlL,GAArB,EAA0B0R,eAA1B;AACA,QAAInB,MAAkB,GAAG,MAAMK,kBAAkB,CAC/C5I,KAD+C,EAE/C1F,IAF+C,EAG/CoP,eAAe,CAACb,MAH+B,CAAjD;AAMA,QAAIa,eAAe,CAACb,MAAhB,CAAuBC,OAA3B,EAAoC;AACpC9C,IAAAA,gBAAgB,CAACgE,MAAjB,CAAwBhS,GAAxB,EAnBA;;AAsBA,QAAI+Q,gBAAgB,CAACR,MAAD,CAApB,EAA8B;AAC5B,UAAIS,kBAAkB,GAAGkB,iBAAiB,CAACnS,KAAD,EAAQwQ,MAAR,CAA1C;AACA,YAAMU,uBAAuB,CAACV,MAAD,EAASS,kBAAT,CAA7B;AACA;AACD,KA1BD;;;AA6BA,QAAIE,aAAa,CAACX,MAAD,CAAjB,EAA2B;AACzB,UAAIY,aAAa,GAAGC,mBAAmB,CAACrR,KAAK,CAACmF,OAAP,EAAgB8C,KAAK,CAACxC,KAAN,CAAYyH,EAA5B,CAAvC;AACAlN,MAAAA,KAAK,CAAC2N,QAAN,CAAesE,MAAf,CAAsBhS,GAAtB,EAFyB;AAIzB;AACA;;AACA8O,MAAAA,WAAW,CAAC;AACVpB,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd,CADA;AAEVb,QAAAA,MAAM,EAAE;AACN,WAACsE,aAAa,CAAC3L,KAAd,CAAoByH,EAArB,GAA0BsD,MAAM,CAAClM;AAD3B;AAFE,OAAD,CAAX;AAMA;AACD,KA1CD;;;AA6CA,QAAIgP,WAAkC,GAAG;AACvCtT,MAAAA,KAAK,EAAE,MADgC;AAEvC4K,MAAAA,IAAI,EAAE4F,MAAM,CAAC5F,IAF0B;AAGvCgB,MAAAA,UAAU,EAAExM,SAH2B;AAIvCyM,MAAAA,UAAU,EAAEzM,SAJ2B;AAKvC0M,MAAAA,WAAW,EAAE1M,SAL0B;AAMvC2M,MAAAA,QAAQ,EAAE3M;AAN6B,KAAzC;AAQAY,IAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBqT,WAAxB;AACAvE,IAAAA,WAAW,CAAC;AAAEpB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ5N,KAAK,CAAC2N,QAAd;AAAZ,KAAD,CAAX;AACD,GAt5BoD;;;AAy5BrD,iBAAeuD,uBAAf,CACE7F,QADF,EAEEiC,UAFF,EAGE;AACA,QAAIjC,QAAQ,CAACqE,UAAb,EAAyB;AACvB1B,MAAAA,sBAAsB,GAAG,IAAzB;AACD;;AACD,KACEV,UAAU,CAACpN,QADb,2CAAA6F,SAAS,QAEP,gDAFO,CAAT,GAAAA,SAAS,OAAT;AAIA,UAAM0I,eAAe,CAACC,MAAa,CAACzN,OAAf,EAAwBqM,UAAU,CAACpN,QAAnC,EAA6C;AAChE0P,MAAAA,kBAAkB,EAAEtC;AAD4C,KAA7C,CAArB;AAGD;;AAED,WAASiG,aAAT,CAAuBtT,GAAvB,EAA0C;AACxC,QAAIgO,gBAAgB,CAAC/C,GAAjB,CAAqBjL,GAArB,CAAJ,EAA+ByS,YAAY,CAACzS,GAAD,CAAZ;AAC/BsO,IAAAA,gBAAgB,CAAC0D,MAAjB,CAAwBhS,GAAxB;AACAmO,IAAAA,cAAc,CAAC6D,MAAf,CAAsBhS,GAAtB;AACAoO,IAAAA,gBAAgB,CAAC4D,MAAjB,CAAwBhS,GAAxB;AACAD,IAAAA,KAAK,CAAC2N,QAAN,CAAesE,MAAf,CAAsBhS,GAAtB;AACD;;AAED,WAASyS,YAAT,CAAsBzS,GAAtB,EAAmC;AACjC,QAAI4O,UAAU,GAAGZ,gBAAgB,CAACyD,GAAjB,CAAqBzR,GAArB,CAAjB;AACA,KAAU4O,UAAV,2CAAA9I,SAAS,wCAA2C9F,GAA3C,CAAT,GAAA8F,SAAS,OAAT;AACA8I,IAAAA,UAAU,CAACD,KAAX;AACAX,IAAAA,gBAAgB,CAACgE,MAAjB,CAAwBhS,GAAxB;AACD;;AAED,WAASuT,gBAAT,CAA0BC,IAA1B,EAA0C;AACxC,SAAK,IAAIxT,GAAT,IAAgBwT,IAAhB,EAAsB;AACpB,UAAIX,OAAO,GAAGN,UAAU,CAACvS,GAAD,CAAxB;AACA,UAAIqT,WAAkC,GAAG;AACvCtT,QAAAA,KAAK,EAAE,MADgC;AAEvC4K,QAAAA,IAAI,EAAEkI,OAAO,CAAClI,IAFyB;AAGvCgB,QAAAA,UAAU,EAAExM,SAH2B;AAIvCyM,QAAAA,UAAU,EAAEzM,SAJ2B;AAKvC0M,QAAAA,WAAW,EAAE1M,SAL0B;AAMvC2M,QAAAA,QAAQ,EAAE3M;AAN6B,OAAzC;AAQAY,MAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBqT,WAAxB;AACD;AACF;;AAED,WAASjB,sBAAT,GAAwC;AACtC,QAAIqB,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIzT,GAAT,IAAgBoO,gBAAhB,EAAkC;AAChC,UAAIyE,OAAO,GAAG9S,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,CAAd;AACA,OAAU6S,OAAV,2CAAA/M,SAAS,+BAA+B9F,GAA/B,CAAT,GAAA8F,SAAS,OAAT;;AACA,UAAI+M,OAAO,CAAC9S,KAAR,KAAkB,SAAtB,EAAiC;AAC/BqO,QAAAA,gBAAgB,CAAC4D,MAAjB,CAAwBhS,GAAxB;AACAyT,QAAAA,QAAQ,CAAC9S,IAAT,CAAcX,GAAd;AACD;AACF;;AACDuT,IAAAA,gBAAgB,CAACE,QAAD,CAAhB;AACD;;AAED,WAASnB,oBAAT,CAA8BoB,QAA9B,EAAyD;AACvD,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI,CAAC3T,GAAD,EAAMiN,EAAN,CAAT,IAAsBkB,cAAtB,EAAsC;AACpC,UAAIlB,EAAE,GAAGyG,QAAT,EAAmB;AACjB,YAAIb,OAAO,GAAG9S,KAAK,CAAC2N,QAAN,CAAe+D,GAAf,CAAmBzR,GAAnB,CAAd;AACA,SAAU6S,OAAV,2CAAA/M,SAAS,+BAA+B9F,GAA/B,CAAT,GAAA8F,SAAS,OAAT;;AACA,YAAI+M,OAAO,CAAC9S,KAAR,KAAkB,SAAtB,EAAiC;AAC/B0S,UAAAA,YAAY,CAACzS,GAAD,CAAZ;AACAmO,UAAAA,cAAc,CAAC6D,MAAf,CAAsBhS,GAAtB;AACA2T,UAAAA,UAAU,CAAChT,IAAX,CAAgBX,GAAhB;AACD;AACF;AACF;;AACDuT,IAAAA,gBAAgB,CAACI,UAAD,CAAhB;AACA,WAAOA,UAAU,CAACtU,MAAX,GAAoB,CAA3B;AACD,GAn+BoD;AAs+BrD;;;AACA,WAASuU,uBAAT,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAIE;AACA1H,IAAAA,oBAAoB,GAAGwH,SAAvB;AACAtH,IAAAA,iBAAiB,GAAGuH,WAApB;;AACAxH,IAAAA,uBAAuB,GAAGyH,MAAM,KAAM9T,QAAD,IAAcA,QAAQ,CAACD,GAA5B,CAAhC,CAHA;AAMA;AACA;;;AACA,QAAI,CAACwM,qBAAD,IAA0BzM,KAAK,CAACsN,UAAN,KAAqB3B,eAAnD,EAAoE;AAClEc,MAAAA,qBAAqB,GAAG,IAAxB;AACA,UAAIwH,CAAC,GAAG7E,sBAAsB,CAACpP,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACmF,OAAvB,CAA9B;;AACA,UAAI8O,CAAC,IAAI,IAAT,EAAe;AACblF,QAAAA,WAAW,CAAC;AAAExB,UAAAA,qBAAqB,EAAE0G;AAAzB,SAAD,CAAX;AACD;AACF;;AAED,WAAO,MAAM;AACX3H,MAAAA,oBAAoB,GAAG,IAAvB;AACAE,MAAAA,iBAAiB,GAAG,IAApB;AACAD,MAAAA,uBAAuB,GAAG,IAA1B;AACD,KAJD;AAKD;;AAED,WAASsD,kBAAT,CACE3P,QADF,EAEEiF,OAFF,EAGQ;AACN,QAAImH,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;AACxE,UAAIvM,GAAG,GAAGsM,uBAAuB,CAACrM,QAAD,EAAWiF,OAAX,CAAvB,IAA8CjF,QAAQ,CAACD,GAAjE;AACAqM,MAAAA,oBAAoB,CAACrM,GAAD,CAApB,GAA4BuM,iBAAiB,EAA7C;AACD;AACF;;AAED,WAAS4C,sBAAT,CACElP,QADF,EAEEiF,OAFF,EAGiB;AACf,QAAImH,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;AACxE,UAAIvM,GAAG,GAAGsM,uBAAuB,CAACrM,QAAD,EAAWiF,OAAX,CAAvB,IAA8CjF,QAAQ,CAACD,GAAjE;AACA,UAAIgU,CAAC,GAAG3H,oBAAoB,CAACrM,GAAD,CAA5B;;AACA,UAAI,OAAOgU,CAAP,KAAa,QAAjB,EAA2B;AACzB,eAAOA,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED9G,EAAAA,MAAM,GAAG;AACP,QAAInN,KAAJ,GAAY;AACV,aAAOA,KAAP;AACD,KAHM;;AAIPwO,IAAAA,UAJO;AAKPM,IAAAA,SALO;AAMP+E,IAAAA,uBANO;AAOPvE,IAAAA,QAPO;AAQPmD,IAAAA,KARO;AASP/C,IAAAA,UATO;AAUPhP,IAAAA,UAVO;AAWP8R,IAAAA,UAXO;AAYPe,IAAAA,aAZO;AAaP5E,IAAAA,OAbO;AAcPuF,IAAAA,yBAAyB,EAAEjG;AAdpB,GAAT;AAiBA,SAAOd,MAAP;AACD;AAGD;AACA;AACA;;AAEA,SAAShB,yBAAT,CACEvH,MADF,EAEEW,UAFF,EAGE4O,MAHF,EAIqB;AAAA,MAFnB5O,UAEmB;AAFnBA,IAAAA,UAEmB,GAFI,EAEJ;AAAA;;AAAA,MADnB4O,MACmB;AADnBA,IAAAA,MACmB,GADG,IAAI7F,GAAJ,EACH;AAAA;;AACnB,SAAO1J,MAAM,CAAC5F,GAAP,CAAW,CAACyG,KAAD,EAAQvG,KAAR,KAAkB;AAClC,QAAIkV,QAAQ,GAAG,CAAC,GAAG7O,UAAJ,EAAgBrG,KAAhB,CAAf;AACA,QAAIgO,EAAE,GAAG,OAAOzH,KAAK,CAACyH,EAAb,KAAoB,QAApB,GAA+BzH,KAAK,CAACyH,EAArC,GAA0CkH,QAAQ,CAACpK,IAAT,CAAc,GAAd,CAAnD;AACA,KACE,CAACmK,MAAM,CAACjJ,GAAP,CAAWgC,EAAX,CADH,2CAAAnH,SAAS,QAEP,wCAAqCmH,EAArC,mBACE,wDAHK,CAAT,GAAAnH,SAAS,OAAT;AAKAoO,IAAAA,MAAM,CAACnB,GAAP,CAAW9F,EAAX;;AACA,QAAImH,SAA0B,gBACzB5O,KADyB;AAE5ByH,MAAAA,EAF4B;AAG5B/G,MAAAA,QAAQ,EAAEV,KAAK,CAACU,QAAN,GACNgG,yBAAyB,CAAC1G,KAAK,CAACU,QAAP,EAAiBiO,QAAjB,EAA2BD,MAA3B,CADnB,GAEN/U;AALwB,MAA9B;;AAOA,WAAOiV,SAAP;AACD,GAjBM,CAAP;AAkBD;;AAED,SAASlC,iBAAT,CACEnS,KADF,EAEEqL,QAFF,EAGc;AACZ,MAAI;AAAEO,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,WAA1B;AAAuCC,IAAAA;AAAvC,MAAoD/L,KAAK,CAACsN,UAA9D;AACA,MAAIA,UAAuC,GAAG;AAC5CtN,IAAAA,KAAK,EAAE,SADqC;AAE5CE,IAAAA,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBmL,QAAQ,CAACnL,QAA1B,CAFoB;AAG5C0L,IAAAA,UAAU,EAAEA,UAAU,IAAIxM,SAHkB;AAI5CyM,IAAAA,UAAU,EAAEA,UAAU,IAAIzM,SAJkB;AAK5C0M,IAAAA,WAAW,EAAEA,WAAW,IAAI1M,SALgB;AAM5C2M,IAAAA,QAAQ,EAAEA,QAAQ,IAAI3M;AANsB,GAA9C;AAQA,SAAOkO,UAAP;AACD;;AAED,SAASkE,gBAAT,CACExR,KADF,EAEEmF,OAFF,EAGEsK,UAHF,EAIEvP,QAJF,EAKE8N,sBALF,EAMEgC,iBANF,EAOEC,kBAPF,EAQEqE,0BARF,EAS0D;AACxD;AACA;AACA;AACA,MAAIC,2BAA2B,GAAGtE,kBAAkB,GAChD9K,OAAO,CAACqP,SAAR,CACGxH,CAAD,IAAOA,CAAC,CAACvH,KAAF,CAAQyH,EAAR,KAAelK,MAAM,CAACyQ,IAAP,CAAYxD,kBAAZ,EAAgC,CAAhC,CADxB,CADgD,GAIhD9K,OAAO,CAAC7F,MAJZ;AAMA,MAAIyT,YAAY,GAAG9C,kBAAkB,GACjCjN,MAAM,CAACyR,MAAP,CAAcxE,kBAAd,EAAkC,CAAlC,CADiC,GAEjCD,iBAAiB,GACjBhN,MAAM,CAACyR,MAAP,CAAczE,iBAAd,EAAiC,CAAjC,CADiB,GAEjB,IAJJ,CAVwD;;AAiBxD,MAAI0E,iBAAiB,GAAGvP,OAAO,CAACmC,MAAR,CAAe,CAACW,KAAD,EAAQ/I,KAAR,KAAkB;AACvD,QAAI,CAAC+I,KAAK,CAACxC,KAAN,CAAYwH,MAAb,IAAuB/N,KAAK,IAAIqV,2BAApC,EAAiE;AAC/D,aAAO,KAAP;AACD;;AACD,WACEI,WAAW,CAAC3U,KAAK,CAAC+M,UAAP,EAAmB/M,KAAK,CAACmF,OAAN,CAAcjG,KAAd,CAAnB,EAAyC+I,KAAzC,CAAX,IACA2M,sBAAsB,CACpB5U,KAAK,CAACE,QADc,EAEpBF,KAAK,CAACmF,OAAN,CAAcjG,KAAd,CAFoB,EAGpBuQ,UAHoB,EAIpBvP,QAJoB,EAKpB+H,KALoB,EAMpB+F,sBANoB,EAOpB+E,YAPoB,CAFxB;AAYD,GAhBuB,CAAxB,CAjBwD;;AAoCxD,MAAIxB,oBAAwD,GAAG,EAA/D;;AACA,MAAIvD,sBAAJ,EAA4B;AAC1B,SAAK,IAAI/O,KAAT,IAAkBqV,0BAA0B,CAACvV,OAA3B,EAAlB,EAAwD;AACtD,UAAI,CAACkB,GAAD,EAAM,CAACsC,IAAD,EAAO0F,KAAP,CAAN,IAAuBhJ,KAA3B;AACA,UAAI4V,gBAAgB,GAAGD,sBAAsB,CAC3CrS,IAD2C,EAE3C0F,KAF2C,EAG3CwH,UAH2C,EAI3ClN,IAJ2C,EAK3C0F,KAL2C,EAM3C+F,sBAN2C,EAO3C+E,YAP2C,CAA7C;;AASA,UAAI8B,gBAAJ,EAAsB;AACpBtD,QAAAA,oBAAoB,CAAC3Q,IAArB,CAA0B,CAACX,GAAD,EAAMsC,IAAN,EAAY0F,KAAZ,CAA1B;AACD;AACF;AACF;;AAED,SAAO,CAACyM,iBAAD,EAAoBnD,oBAApB,CAAP;AACD;;AAED,SAASoD,WAAT,CACEG,iBADF,EAEEC,YAFF,EAGE9M,KAHF,EAIE;AACA,MAAI+M,KAAK;AAEP,GAACD,YAAD;AAEA9M,EAAAA,KAAK,CAACxC,KAAN,CAAYyH,EAAZ,KAAmB6H,YAAY,CAACtP,KAAb,CAAmByH,EAJxC,CADA;AAQA;;AACA,MAAI+H,aAAa,GAAGH,iBAAiB,CAAC7M,KAAK,CAACxC,KAAN,CAAYyH,EAAb,CAAjB,KAAsC9N,SAA1D,CATA;;AAYA,SAAO4V,KAAK,IAAIC,aAAhB;AACD;;AAED,SAASL,sBAAT,CACEM,eADF,EAEEH,YAFF,EAGEtF,UAHF,EAIEvP,QAJF,EAKE+H,KALF,EAME+F,sBANF,EAOE+E,YAPF,EAQE;AAAA;;AACA,MAAIoC,UAAU,GAAGC,SAAS,CAACF,eAAD,CAA1B;AACA,MAAIG,aAAa,GAAGN,YAAY,CAAC5M,MAAjC;AACA,MAAImN,OAAO,GAAGF,SAAS,CAAClV,QAAD,CAAvB;AACA,MAAIqV,UAAU,GAAGtN,KAAK,CAACE,MAAvB,CAJA;AAOA;AACA;AACA;AACA;AACA;;AACA,MAAIqN,uBAAuB;AAEzBT,EAAAA,YAAY,CAAC3U,QAAb,KAA0B6H,KAAK,CAAC7H,QAAhC;AAEA;AACC,4BAAA2U,YAAY,CAACtP,KAAb,CAAmB5B,IAAnB,2CAAyBoF,QAAzB,CAAkC,GAAlC,MACC8L,YAAY,CAAC5M,MAAb,CAAoB,GAApB,MAA6BF,KAAK,CAACE,MAAN,CAAa,GAAb,CAJ/B;AAMAgN,EAAAA,UAAU,CAACzR,QAAX,OAA0B4R,OAAO,CAAC5R,QAAR,EAN1B;AAQAyR,EAAAA,UAAU,CAACzT,MAAX,KAAsB4T,OAAO,CAAC5T,MAR9B;AAUAsM,EAAAA,sBAZF;;AAcA,MAAI/F,KAAK,CAACxC,KAAN,CAAYoP,gBAAhB,EAAkC;AAChC,WAAO5M,KAAK,CAACxC,KAAN,CAAYoP,gBAAZ;AACLM,MAAAA,UADK;AAELE,MAAAA,aAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA;AAJK,OAKF9F,UALE;AAMLsD,MAAAA,YANK;AAOLyC,MAAAA;AAPK,OAAP;AASD;;AAED,SAAOA,uBAAP;AACD;;AAED,eAAe3E,kBAAf,CACE5I,KADF,EAEE/H,QAFF,EAGE4Q,MAHF,EAIE2E,gBAJF,EAKuB;AACrB,MAAIC,UAAU,GAAGhK,UAAU,CAACd,IAA5B;AACA,MAAI4F,MAAJ;;AAEA,MAAI;AACF,QAAIE,IAAyB,GAAG+E,gBAAgB,GAAG,QAAH,GAAc,QAA9D;AACA,QAAIE,OAAO,GAAG1N,KAAK,CAACxC,KAAN,CAAYiL,IAAZ,CAAd;AACA,KACEiF,OADF,2CAAA5P,SAAS,gCAEe2K,IAFf,yBAEsCzI,KAAK,CAACxC,KAAN,CAAYyH,EAFlD,cAAT,GAAAnH,SAAS,OAAT;AAKAyK,IAAAA,MAAM,GAAG,MAAMmF,OAAO,CAAC;AACrBxN,MAAAA,MAAM,EAAEF,KAAK,CAACE,MADO;AAErByN,MAAAA,OAAO,EAAEC,aAAa,CAAC3V,QAAD,EAAWuV,gBAAX,CAFD;AAGrB3E,MAAAA;AAHqB,KAAD,CAAtB;AAKD,GAbD,CAaE,OAAOvN,CAAP,EAAU;AACVmS,IAAAA,UAAU,GAAGhK,UAAU,CAACpH,KAAxB;AACAkM,IAAAA,MAAM,GAAGjN,CAAT;AACD;;AAED,MAAIiN,MAAM,YAAYpF,QAAtB,EAAgC;AAAA;;AAC9B;AACA,QAAIL,MAAM,GAAGyF,MAAM,CAACzF,MAApB;AACA,QAAI7K,QAAQ,GAAGsQ,MAAM,CAACxF,OAAP,CAAe0G,GAAf,CAAmB,UAAnB,CAAf;;AACA,QAAI3G,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAA3B,IAAkC7K,QAAQ,IAAI,IAAlD,EAAwD;AACtD,aAAO;AACLwQ,QAAAA,IAAI,EAAEhF,UAAU,CAACL,QADZ;AAELN,QAAAA,MAFK;AAGL7K,QAAAA,QAHK;AAILwP,QAAAA,UAAU,EAAEc,MAAM,CAACxF,OAAP,CAAe0G,GAAf,CAAmB,oBAAnB,MAA6C;AAJpD,OAAP;AAMD;;AAED,QAAI9G,IAAJ;;AACA,+BAAI4F,MAAM,CAACxF,OAAP,CAAe0G,GAAf,CAAmB,cAAnB,CAAJ,aAAI,oBAAoC5L,UAApC,CAA+C,kBAA/C,CAAJ,EAAwE;AACtE8E,MAAAA,IAAI,GAAG,MAAM4F,MAAM,CAAC7F,IAAP,EAAb;AACD,KAFD,MAEO;AACLC,MAAAA,IAAI,GAAG,MAAM4F,MAAM,CAACsF,IAAP,EAAb;AACD;;AAED,QAAIJ,UAAU,KAAKhK,UAAU,CAACpH,KAA9B,EAAqC;AACnC,aAAO;AACLoM,QAAAA,IAAI,EAAEgF,UADD;AAELpR,QAAAA,KAAK,EAAE,IAAIgH,aAAJ,CAAkBP,MAAlB,EAA0ByF,MAAM,CAAChF,UAAjC,EAA6CZ,IAA7C;AAFF,OAAP;AAID;;AAED,WAAO;AAAE8F,MAAAA,IAAI,EAAEgF,UAAR;AAAoB9K,MAAAA;AAApB,KAAP;AACD;;AAED,MAAI8K,UAAU,KAAKhK,UAAU,CAACpH,KAA9B,EAAqC;AACnC,WAAO;AAAEoM,MAAAA,IAAI,EAAEgF,UAAR;AAAoBpR,MAAAA,KAAK,EAAEkM;AAA3B,KAAP;AACD;;AAED,SAAO;AAAEE,IAAAA,IAAI,EAAEgF,UAAR;AAAoB9K,IAAAA,IAAI,EAAE4F;AAA1B,GAAP;AACD;;AAED,SAASqF,aAAT,CACE3V,QADF,EAEEuV,gBAFF,EAGW;AACT,MAAI5K,IAA6B,GAAGzL,SAApC;;AAEA,MAAIqW,gBAAJ,EAAsB;AACpB,QAAI;AAAE7J,MAAAA,UAAF;AAAcE,MAAAA,WAAd;AAA2BC,MAAAA;AAA3B,QAAwC0J,gBAA5C;AACA,QAAIM,IAAI,GAAGhK,QAAX,CAFoB;AAKpB;;AACA,QAAID,WAAW,KAAK,mCAApB,EAAyD;AACvDiK,MAAAA,IAAI,GAAG,IAAIC,eAAJ,EAAP;;AAEA,WAAK,IAAI,CAAC/V,GAAD,EAAMmJ,KAAN,CAAT,IAAyB2C,QAAQ,CAAChN,OAAT,EAAzB,EAA6C;AAC3C,UACE,OAAOqK,KAAP,KAAiB,QADnB,4CAAArD,SAAS,QAEP,qFACE,2CAHK,CAAT,GAAAA,SAAS,OAAT;AAKAgQ,QAAAA,IAAI,CAACE,MAAL,CAAYhW,GAAZ,EAAiBmJ,KAAjB;AACD;AACF;;AAEDyB,IAAAA,IAAI,GAAG;AACLqL,MAAAA,MAAM,EAAEtK,UAAU,CAACuK,WAAX,EADH;AAELnL,MAAAA,OAAO,EAAE;AACP,wBAAgBc;AADT,OAFJ;AAKLiK,MAAAA;AALK,KAAP;AAOD;;AAED,MAAItT,GAAG,GAAG2S,SAAS,CAAClV,QAAD,CAAT,CAAoBwD,QAApB,EAAV;AACA,SAAO,IAAI0S,OAAJ,CAAY3T,GAAZ,EAAiBoI,IAAjB,CAAP;AACD;;AAED,SAASuH,iBAAT,CACEpS,KADF,EAEEmF,OAFF,EAGEmM,aAHF,EAIEM,OAJF,EAKE3B,kBALF,EAMEsB,oBANF,EAOES,cAPF,EAWE;AACA;AACA,MAAIjF,UAAqC,GAAG,EAA5C;AACA,MAAID,MAA6B,GAAG,IAApC,CAHA;;AAMA8E,EAAAA,OAAO,CAACpM,OAAR,CAAgB,CAACgL,MAAD,EAAStR,KAAT,KAAmB;AACjC,QAAIgO,EAAE,GAAGoE,aAAa,CAACpS,KAAD,CAAb,CAAqBuG,KAArB,CAA2ByH,EAApC;AACA,KACE,CAAC8D,gBAAgB,CAACR,MAAD,CADnB,2CAAAzK,SAAS,QAEP,qDAFO,CAAT,GAAAA,SAAS,OAAT;;AAIA,QAAIoL,aAAa,CAACX,MAAD,CAAjB,EAA2B;AACzB;AACA;AACA,UAAIY,aAAa,GAAGC,mBAAmB,CAAClM,OAAD,EAAU+H,EAAV,CAAvC;AACA,UAAI5I,KAAK,GAAGkM,MAAM,CAAClM,KAAnB,CAJyB;AAMzB;AACA;;AACA,UAAI2L,kBAAJ,EAAwB;AACtB3L,QAAAA,KAAK,GAAGtB,MAAM,CAACyR,MAAP,CAAcxE,kBAAd,EAAkC,CAAlC,CAAR;AACAA,QAAAA,kBAAkB,GAAG,IAArB;AACD;;AACDnD,MAAAA,MAAM,GAAG9J,MAAM,CAACuB,MAAP,CAAcuI,MAAM,IAAI,EAAxB,EAA4B;AACnC,SAACsE,aAAa,CAAC3L,KAAd,CAAoByH,EAArB,GAA0B5I;AADS,OAA5B,CAAT;AAGD,KAfD,MAeO;AACLyI,MAAAA,UAAU,CAACG,EAAD,CAAV,GAAiBsD,MAAM,CAAC5F,IAAxB;AACD;AACF,GAxBD,EANA;AAiCA;;AACA,MAAIqF,kBAAJ,EAAwB;AACtBnD,IAAAA,MAAM,GAAGmD,kBAAT;AACD,GApCD;;;AAuCAsB,EAAAA,oBAAoB,CAAC/L,OAArB,CAA6B,QAAqBtG,KAArB,KAA+B;AAAA,QAA9B,CAACe,GAAD,EAAMsC,IAAN,EAAY0F,KAAZ,CAA8B;AAC1D,QAAIuI,MAAM,GAAGwB,cAAc,CAAC9S,KAAD,CAA3B,CAD0D;;AAI1D,QAAIiS,aAAa,CAACX,MAAD,CAAjB,EAA2B;AAAA;;AACzB,UAAIY,aAAa,GAAGC,mBAAmB,CAACrR,KAAK,CAACmF,OAAP,EAAgB8C,KAAK,CAACxC,KAAN,CAAYyH,EAA5B,CAAvC;;AACA,UAAI,aAACJ,MAAD,aAAC,QAASsE,aAAa,CAAC3L,KAAd,CAAoByH,EAA7B,CAAD,CAAJ,EAAuC;AACrCJ,QAAAA,MAAM,gBACDA,MADC;AAEJ,WAACsE,aAAa,CAAC3L,KAAd,CAAoByH,EAArB,GAA0BsD,MAAM,CAAClM;AAF7B,UAAN;AAID;;AACDtE,MAAAA,KAAK,CAAC2N,QAAN,CAAesE,MAAf,CAAsBhS,GAAtB;AACD,KATD,MASO,IAAI+Q,gBAAgB,CAACR,MAAD,CAApB,EAA8B;AACnC;AACA;AACA,+CAAAzK,SAAS,QAAQ,yCAAR,CAAT,GAAAA,SAAS,OAAT;AACD,KAJM,MAIA;AACL,UAAIuN,WAAkC,GAAG;AACvCtT,QAAAA,KAAK,EAAE,MADgC;AAEvC4K,QAAAA,IAAI,EAAE4F,MAAM,CAAC5F,IAF0B;AAGvCgB,QAAAA,UAAU,EAAExM,SAH2B;AAIvCyM,QAAAA,UAAU,EAAEzM,SAJ2B;AAKvC0M,QAAAA,WAAW,EAAE1M,SAL0B;AAMvC2M,QAAAA,QAAQ,EAAE3M;AAN6B,OAAzC;AAQAY,MAAAA,KAAK,CAAC2N,QAAN,CAAexC,GAAf,CAAmBlL,GAAnB,EAAwBqT,WAAxB;AACD;AACF,GA5BD;AA8BA,SAAO;AAAEvG,IAAAA,UAAF;AAAcD,IAAAA;AAAd,GAAP;AACD;;AAED,SAASqC,eAAT,CACEnP,KADF,EAEEgP,QAFF,EAGa;AACX;AACA;AACA,MAAIqH,oBAAoB,GAAG,CAACrH,QAAQ,CAAC7J,OAAT,IAAoBnF,KAAK,CAACmF,OAA3B,EAAoCmC,MAApC,CACxBW,KAAD;AAAA;;AAAA,WACEjI,KAAK,CAAC+M,UAAN,CAAiB9E,KAAK,CAACxC,KAAN,CAAYyH,EAA7B,MAAqC9N,SAArC,IACA,yBAAA4P,QAAQ,CAACjC,UAAT,0CAAsB9E,KAAK,CAACxC,KAAN,CAAYyH,EAAlC,OAA0C9N,SAF5C;AAAA,GADyB,CAA3B;AAKA,sBACK4P,QAAQ,CAACjC,UADd,EAEKsJ,oBAAoB,CAAC9O,MAArB,CACD,CAAC+O,GAAD,EAAMrO,KAAN,KACEjF,MAAM,CAACuB,MAAP,CAAc+R,GAAd,EAAmB;AACjB,KAACrO,KAAK,CAACxC,KAAN,CAAYyH,EAAb,GAAkBlN,KAAK,CAAC+M,UAAN,CAAiB9E,KAAK,CAACxC,KAAN,CAAYyH,EAA7B;AADD,GAAnB,CAFD,EAKD,EALC,CAFL;AAUD;AAGD;;;AACA,SAASmE,mBAAT,CACElM,OADF,EAEEoR,OAFF,EAGkB;AAChB,SACEpR,OAAO,CACJvC,KADH,CACS,CADT,EACYuC,OAAO,CAACqP,SAAR,CAAmBxH,CAAD,IAAOA,CAAC,CAACvH,KAAF,CAAQyH,EAAR,KAAeqJ,OAAxC,IAAmD,CAD/D,EAEGC,OAFH,GAGGC,IAHH,CAGSzJ,CAAD,IAAOA,CAAC,CAACvH,KAAF,CAAQiR,YAHvB,KAGwCvR,OAAO,CAAC,CAAD,CAJjD;AAMD;;AAED,SAASwH,kBAAT,CAA4B/H,MAA5B,EAAyE;AACvE,SAAO,CACL;AACEuD,IAAAA,MAAM,EAAE,EADV;AAEE/H,IAAAA,QAAQ,EAAE,EAFZ;AAGEgI,IAAAA,YAAY,EAAE,EAHhB;AAIE3C,IAAAA,KAAK,EAAEb,MAAM,CAAC,CAAD;AAJf,GADK,CAAP;AAQD;;;AAGD,SAASsN,YAAT,CAAsBN,OAAtB,EAAyE;AACvE,OAAK,IAAIxM,CAAC,GAAGwM,OAAO,CAACtS,MAAR,GAAiB,CAA9B,EAAiC8F,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC5C,QAAIoL,MAAM,GAAGoB,OAAO,CAACxM,CAAD,CAApB;;AACA,QAAI4L,gBAAgB,CAACR,MAAD,CAApB,EAA8B;AAC5B,aAAOA,MAAP;AACD;AACF;AACF;;;AAGD,SAAS9P,UAAT,CAAoBR,QAApB,EAA8C;AAC5C,SAAOA,QAAQ,CAACE,QAAT,GAAoBF,QAAQ,CAACwB,MAApC;AACD;;AAED,SAASqO,gBAAT,CAA0BxJ,CAA1B,EAAuCC,CAAvC,EAA6D;AAC3D,SACED,CAAC,CAACnG,QAAF,KAAeoG,CAAC,CAACpG,QAAjB,IAA6BmG,CAAC,CAAC7E,MAAF,KAAa8E,CAAC,CAAC9E,MAA5C,IAAsD6E,CAAC,CAAC5E,IAAF,KAAW6E,CAAC,CAAC7E,IADrE;AAGD;;AAED,SAASwP,aAAT,CAAuBX,MAAvB,EAAkE;AAChE,SAAOA,MAAM,CAACE,IAAP,KAAgBhF,UAAU,CAACpH,KAAlC;AACD;;AAED,SAAS0M,gBAAT,CAA0BR,MAA1B,EAAyE;AACvE,SAAO,CAAAA,MAAM,QAAN,YAAAA,MAAM,CAAEE,IAAR,MAAiBhF,UAAU,CAACL,QAAnC;AACD;;AAED,SAASmE,sBAAT,CACED,IADF,EAEqC;AACnC,SAAOA,IAAI,IAAI,IAAR,IAAgB,cAAcA,IAA9B,IAAsCA,IAAI,CAACxD,QAAL,IAAiB,IAA9D;AACD;;AAED,SAASmE,kBAAT,CACET,UADF,EAEkC;AAChC,SAAOA,UAAU,IAAIA,UAAU,CAAC7D,UAAX,KAA0B,KAA/C;AACD;;AAED,SAAS2E,kBAAT,CAA4B7O,MAA5B,EAAqD;AACnD,SAAO,IAAIsU,eAAJ,CAAoBtU,MAApB,EAA4BiV,MAA5B,CAAmC,OAAnC,EAA4CtP,IAA5C,CAAkDuP,CAAD,IAAOA,CAAC,KAAK,EAA9D,CAAP;AACD;;AAED,SAASxB,SAAT,CAAmBlV,QAAnB,EAAqD;AACnD,MAAIkC,IAAI,GACN,OAAOZ,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACtB,QAAd,KAA2B,WAA5D,GACIsB,MAAM,CAACtB,QAAP,CAAgB2W,MADpB,GAEI,mBAHN;AAIA,MAAItU,IAAI,GAAG,OAAOrC,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CQ,UAAU,CAACR,QAAD,CAA/D;AACA,SAAO,IAAI4W,GAAJ,CAAQvU,IAAR,EAAcH,IAAd,CAAP;AACD;;;;;AC55DD;AAQA,SAAS2U,kBAAT,OAI+D;AAAA,MAJnC;AAC1BnY,IAAAA,cAD0B;AAE1BC,IAAAA;AAF0B,GAImC;AAAA,MAD1DmY,UAC0D;;AAC7D,MAAIvW,OAAO,GAAG/B,mBAAmB,CAAC;AAAEE,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAD,CAAjC;AACA,SAAOoN,YAAY;AAAGxL,IAAAA;AAAH,KAAeuW,UAAf,EAAnB;AACD;;AAED,SAASC,mBAAT,QAGgE;AAAA,MAHnC;AAC3BzV,IAAAA;AAD2B,GAGmC;AAAA,MAD3DwV,UAC2D;;AAC9D,MAAIvW,OAAO,GAAGa,oBAAoB,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAAlC;AACA,SAAOyK,YAAY;AAAGxL,IAAAA;AAAH,KAAeuW,UAAf,EAAnB;AACD;;AAED,SAASE,gBAAT,QAG6D;AAAA,MAHnC;AACxB1V,IAAAA;AADwB,GAGmC;AAAA,MADxDwV,UACwD;;AAC3D,MAAIvW,OAAO,GAAGsB,iBAAiB,CAAC;AAAEP,IAAAA;AAAF,GAAD,CAA/B;AACA,SAAOyK,YAAY;AAAGxL,IAAAA;AAAH,KAAeuW,UAAf,EAAnB;AACD;;;;"}