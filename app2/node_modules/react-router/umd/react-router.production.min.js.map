{"version":3,"file":"react-router.production.min.js","sources":["../../../../packages/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts","../../../../packages/react-router/lib/use-sync-external-store-shim/index.ts","../../../../packages/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts","../../../../packages/react-router/lib/context.ts","../../../../packages/react-router/lib/hooks.tsx","../../../../packages/react-router/lib/components.tsx"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      // @ts-expect-error\n      if (React.startTransition !== undefined) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n","/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  // @ts-expect-error\n  React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n","import * as React from \"react\";\nimport type { History, Location, RouteMatch, Router } from \"@remix-run/router\";\nimport { Action as NavigationType } from \"@remix-run/router\";\n\n// Contexts for data routers\nexport const DataRouterContext = React.createContext<Router | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n  Router as DataRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  warning,\n} from \"@remix-run/router\";\n\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-href\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-resolved-path\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext\n  );\n}\n\nfunction DefaultErrorElement() {\n  let error = useRouteError();\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n  return (\n    <>\n      <h2>Unhandled Thrown Error!</h2>\n      <p style={{ fontStyle: \"italic\" }}>{error?.message || error}</p>\n      {error?.stack ? <pre style={preStyles}>{error?.stack}</pre> : null}\n      <p>💿 Hey developer 👋</p>\n      <p>\n        You can provide a way better UX than this when your app throws errors by\n        providing your own&nbsp;\n        <code style={codeStyles}>errorElement</code> props on&nbsp;\n        <code style={codeStyles}>&lt;Route&gt;</code>\n      </p>\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteErrorContext.Provider\n        value={this.state.error}\n        children={this.props.component}\n      />\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: DataRouter[\"state\"] | null\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = dataRouterState\n      ? match.route.errorElement || <DefaultErrorElement />\n      : null;\n    let getChildren = () => (\n      <RouteContext.Provider\n        children={\n          error\n            ? errorElement\n            : match.route.element !== undefined\n            ? match.route.element\n            : outlet\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(renderedMatches.slice(0, index + 1)),\n        }}\n      />\n    );\n\n    // Only wrap in an error boundary within data router usages when we have an\n    // errorElement on this route.  Otherwise let it bubble up to an ancestor\n    // errorElement\n    return dataRouterState && (match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction useDataRouterState(hookName: DataRouterHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, `${hookName} must be used within a DataRouter`);\n  return state;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let router = React.useContext(DataRouterContext);\n  invariant(router, `useRevalidator must be used within a DataRouter`);\n  let state = useDataRouterState(DataRouterHook.UseRevalidator);\n  return { revalidate: router.revalidate, state: state.revalidation };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(DataRouterHook.UseMatches);\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id],\n          handle: match.route.handle,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData() {\n  let state = useDataRouterState(DataRouterHook.UseLoaderData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useLoaderData must be used inside a RouteContext`);\n\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${useLoaderData} can only be used on routes that contain a unique \"id\"`\n  );\n\n  return state.loaderData?.[thisRoute.route.id];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): any {\n  let state = useDataRouterState(DataRouterHook.UseRouteLoaderData);\n  return state.loaderData?.[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData() {\n  let state = useDataRouterState(DataRouterHook.UseRouteError);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useRouteError must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * errorElement to display a proper error message.\n */\nexport function useRouteError() {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterHook.UseRouteError);\n  let route = React.useContext(RouteContext);\n  let thisRoute = route.matches[route.matches.length - 1];\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  invariant(route, `useRouteError must be used inside a RouteContext`);\n  invariant(\n    thisRoute.route.id,\n    `useRouteError can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[thisRoute.route.id];\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import * as React from \"react\";\nimport type {\n  HydrationState,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  RouteMatch,\n  RouteObject,\n  Router as DataRouter,\n  RouterState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  createMemoryRouter,\n  invariant,\n  normalizePathname,\n  parsePath,\n  stripBasename,\n  warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport {\n  LocationContext,\n  NavigationContext,\n  Navigator,\n  DataRouterContext,\n  DataRouterStateContext,\n} from \"./context\";\nimport {\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\n// Module-scoped singleton to hold the router.  Extracted from the React lifecycle\n// to avoid issues w.r.t. dual initialization fetches in concurrent rendering.\n// Data router apps are expected to have a static route tree and are not intended\n// to be unmounted/remounted at runtime.\nlet routerSingleton: DataRouter;\n\n/**\n * Unit-testing-only function to reset the router between tests\n * @private\n */\nexport function _resetModuleScope() {\n  // @ts-expect-error\n  routerSingleton = null;\n}\n\n/**\n * @private\n */\nexport function useRenderDataRouter({\n  children,\n  fallbackElement,\n  routes,\n  createRouter,\n}: {\n  children?: React.ReactNode;\n  fallbackElement: React.ReactElement;\n  routes?: RouteObject[];\n  createRouter: (routes: RouteObject[]) => DataRouter;\n}): React.ReactElement {\n  if (!routerSingleton) {\n    routerSingleton = createRouter(\n      routes || createRoutesFromChildren(children)\n    ).initialize();\n  }\n  let router = routerSingleton;\n\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    () => router.state\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      go: (n) => router.navigate(n),\n      push: (to, state) => router.navigate(to, { state }),\n      replace: (to, state) => router.navigate(to, { replace: true, state }),\n    };\n  }, [router]);\n\n  if (!state.initialized) {\n    return fallbackElement || null;\n  }\n\n  return (\n    <DataRouterContext.Provider value={router}>\n      <DataRouterStateContext.Provider value={state}>\n        <Router\n          location={state.location}\n          navigationType={state.historyAction}\n          navigator={navigator}\n        >\n          <DataRoutes routes={routes} children={children} />\n        </Router>\n      </DataRouterStateContext.Provider>\n    </DataRouterContext.Provider>\n  );\n}\n\nexport interface DataMemoryRouterProps {\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  hydrationData?: HydrationState;\n  fallbackElement: React.ReactElement;\n  routes?: RouteObject[];\n}\n\nexport function DataMemoryRouter({\n  children,\n  initialEntries,\n  initialIndex,\n  hydrationData,\n  fallbackElement,\n  routes,\n}: DataMemoryRouterProps): React.ReactElement {\n  return useRenderDataRouter({\n    children,\n    fallbackElement,\n    routes,\n    createRouter: (routes) =>\n      createMemoryRouter({\n        initialEntries,\n        initialIndex,\n        routes,\n        hydrationData,\n      }),\n  });\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/routers/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/components/navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\ninterface DataRouteProps {\n  id?: RouteObject[\"id\"];\n  loader?: RouteObject[\"loader\"];\n  action?: RouteObject[\"action\"];\n  errorElement?: RouteObject[\"errorElement\"];\n  shouldRevalidate?: RouteObject[\"shouldRevalidate\"];\n  handle?: RouteObject[\"handle\"];\n}\n\nexport interface RouteProps extends DataRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps extends DataRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps extends DataRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps extends DataRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/components/route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/routers/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\ninterface DataRoutesProps extends RoutesProps {\n  routes?: RouteObject[];\n}\n\n/**\n * @private\n * Used as an extension to <Routes> and accepts a manual `routes` array to be\n * instead of using JSX children.  Extracted to it's own component to avoid\n * conditional usage of `useRoutes` if we have to render a `fallbackElement`\n */\nfunction DataRoutes({\n  children,\n  location,\n  routes,\n}: DataRoutesProps): React.ReactElement | null {\n  return useRoutes(routes || createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, parentPath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let treePath = [...parentPath, index];\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null,\n  dataRouterState: DataRouter[\"state\"] | null\n): React.ReactElement | null {\n  return _renderMatches(matches, undefined, dataRouterState);\n}\n"],"names":["is","Object","x","y","useState","useEffect","useLayoutEffect","useDebugValue","React","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","prevValue","value","nextValue","error","shim","window","document","createElement","subscribe","getServerSnapshot","forceUpdate","useSyncExternalStore","undefined","DataRouterContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","matches","RouteErrorContext","useInRouterContext","useLocation","invariant","location","useNavigate","basename","navigator","pathname","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","current","to","options","go","path","resolveTo","parse","joinPaths","replace","push","state","OutletContext","useOutlet","context","React.createElement","Provider","useResolvedPath","useRoutes","routes","locationArg","dataRouterStateContext","parentMatches","routeMatch","length","parentParams","params","parentPathnameBase","locationFromContext","route","parsedLocationArg","parsePath","_parsedLocationArg$pa","startsWith","remainingPathname","slice","matchRoutes","_renderMatches","assign","DefaultErrorElement","useRouteError","lightgrey","preStyles","padding","backgroundColor","codeStyles","style","fontStyle","message","stack","RenderErrorBoundary","constructor","props","componentDidCatch","errorInfo","console","render","this","children","component","dataRouterState","renderedMatches","errors","errorIndex","findIndex","m","id","Math","min","reduceRight","index","errorElement","getChildren","element","concat","DataRouterHook","useDataRouterState","hookName","UseRouteError","thisRoute","_state$errors","routerSingleton","useRenderDataRouter","fallbackElement","createRouter","createRoutesFromChildren","initialize","router","useSyncExternalStoreShim","createHref","n","navigate","initialized","Router","navigationType","historyAction","DataRoutes","Route","_props","basenameProp","locationProp","NavigationType","Pop","static","staticProp","normalizePathname","navigationContext","search","hash","key","trailingPathname","stripBasename","parentPath","forEach","type","apply","treePath","join","caseSensitive","loader","action","shouldRevalidate","handle","initialEntries","initialIndex","hydrationData","createMemoryRouter","historyRef","createMemoryHistory","v5Compat","history","setState","listen","values","actionData","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","UseLoaderData","loaderData","_state$loaderData","pattern","matchPath","UseMatches","data","UseNavigation","navigation","UseRevalidator","revalidate","revalidation","routeId","UseRouteLoaderData","_state$loaderData2"],"mappings":"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"}