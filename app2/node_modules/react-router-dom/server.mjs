import { createElement } from 'react';
import { Action, createRouter, createMemoryHistory, invariant } from '@remix-run/router';
import { parsePath, Router, createRoutesFromChildren, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Routes, createPath } from 'react-router-dom';

/**
 * A <Router> that may not navigate to any other location. This is useful
 * on the server where there is no stateful UI.
 */
function StaticRouter({
  basename,
  children,
  location: locationProp = "/"
}) {
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }

  let action = Action.Pop;
  let location = {
    pathname: locationProp.pathname || "/",
    search: locationProp.search || "",
    hash: locationProp.hash || "",
    state: locationProp.state || null,
    key: locationProp.key || "default"
  };
  let staticNavigator = getStatelessNavigator();
  return /*#__PURE__*/createElement(Router, {
    basename: basename,
    children: children,
    location: location,
    navigationType: action,
    navigator: staticNavigator,
    static: true
  });
}

/**
 * A Data Router that may not navigate to any other location. This is useful
 * on the server where there is no stateful UI.
 */
function DataStaticRouter({
  data,
  location = "/",
  children
}) {
  // Create a router but do not call initialize() so it has no side effects
  // and performs no data fetching
  let staticRouter = createRouter({
    history: createMemoryHistory({
      initialEntries: [location]
    }),
    routes: createRoutesFromChildren(children),
    hydrationData: data
  });
  !staticRouter.state.initialized ? process.env.NODE_ENV !== "production" ? invariant(false, "You must provide a complete `data` prop for <DataStaticRouter>") : invariant(false) : void 0;
  let staticNavigator = getStatelessNavigator();
  return /*#__PURE__*/createElement(UNSAFE_DataRouterContext.Provider, {
    value: staticRouter
  }, /*#__PURE__*/createElement(UNSAFE_DataRouterStateContext.Provider, {
    value: staticRouter.state
  }, /*#__PURE__*/createElement(Router, {
    location: staticRouter.state.location,
    navigationType: staticRouter.state.historyAction,
    navigator: staticNavigator,
    static: true
  }, /*#__PURE__*/createElement(Routes, {
    children: children
  }))));
}

function getStatelessNavigator() {
  return {
    createHref(to) {
      return typeof to === "string" ? to : createPath(to);
    },

    push(to) {
      throw new Error(`You cannot use navigator.push() on the server because it is a stateless ` + `environment. This error was probably triggered when you did a ` + `\`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
    },

    replace(to) {
      throw new Error(`You cannot use navigator.replace() on the server because it is a stateless ` + `environment. This error was probably triggered when you did a ` + `\`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere ` + `in your app.`);
    },

    go(delta) {
      throw new Error(`You cannot use navigator.go() on the server because it is a stateless ` + `environment. This error was probably triggered when you did a ` + `\`navigate(${delta})\` somewhere in your app.`);
    },

    back() {
      throw new Error(`You cannot use navigator.back() on the server because it is a stateless ` + `environment.`);
    },

    forward() {
      throw new Error(`You cannot use navigator.forward() on the server because it is a stateless ` + `environment.`);
    }

  };
}

export { DataStaticRouter, StaticRouter };
